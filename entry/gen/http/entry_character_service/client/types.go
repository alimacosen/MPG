// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryCharacterService HTTP client types
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	entrycharacterservice "mpg/entry/gen/entry_character_service"

	goa "goa.design/goa/v3/pkg"
)

// CreatCharacterRequestBody is the type of the "EntryCharacterService" service
// "creatCharacter" endpoint HTTP request body.
type CreatCharacterRequestBody struct {
	// Name of the Character
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the Character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateCharacterRequestBody is the type of the "EntryCharacterService"
// service "updateCharacter" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Name of the Character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the Character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The amount of health value of the Character
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// The amount of experience value of the Character
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CreatCharacterResponseBody is the type of the "EntryCharacterService"
// service "creatCharacter" endpoint HTTP response body.
type CreatCharacterResponseBody struct {
	// UUId of the character
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The amount of health value of the character
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// The amount of experience value of the character
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// UUId of the inventory record
	InventoryID *string `form:"inventoryId,omitempty" json:"inventoryId,omitempty" xml:"inventoryId,omitempty"`
}

// GetCharacterResponseBody is the type of the "EntryCharacterService" service
// "getCharacter" endpoint HTTP response body.
type GetCharacterResponseBody struct {
	// UUId of the character
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Name of the character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The amount of health value of the character
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// The amount of experience value of the character
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
	// UUId of the inventory record
	InventoryID *string `form:"inventoryId,omitempty" json:"inventoryId,omitempty" xml:"inventoryId,omitempty"`
}

// NewCreatCharacterRequestBody builds the HTTP request body from the payload
// of the "creatCharacter" endpoint of the "EntryCharacterService" service.
func NewCreatCharacterRequestBody(p *entrycharacterservice.CreatCharacterPayload) *CreatCharacterRequestBody {
	body := &CreatCharacterRequestBody{
		Name:        p.Name,
		Description: p.Description,
	}
	return body
}

// NewUpdateCharacterRequestBody builds the HTTP request body from the payload
// of the "updateCharacter" endpoint of the "EntryCharacterService" service.
func NewUpdateCharacterRequestBody(p *entrycharacterservice.UpdateCharacterPayload) *UpdateCharacterRequestBody {
	body := &UpdateCharacterRequestBody{
		Name:        p.Name,
		Description: p.Description,
		Health:      p.Health,
		Experience:  p.Experience,
	}
	return body
}

// NewCreatCharacterCharacterOK builds a "EntryCharacterService" service
// "creatCharacter" endpoint result from a HTTP "OK" response.
func NewCreatCharacterCharacterOK(body *CreatCharacterResponseBody) *entrycharacterservice.Character {
	v := &entrycharacterservice.Character{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: *body.Description,
		Health:      *body.Health,
		Experience:  *body.Experience,
		InventoryID: *body.InventoryID,
	}

	return v
}

// NewCreatCharacterCreateInvalidArgs builds a EntryCharacterService service
// creatCharacter endpoint create_invalid_args error.
func NewCreatCharacterCreateInvalidArgs(body string) entrycharacterservice.CreateInvalidArgs {
	v := entrycharacterservice.CreateInvalidArgs(body)

	return v
}

// NewCreatCharacterCreateNoCriteria builds a EntryCharacterService service
// creatCharacter endpoint create_no_criteria error.
func NewCreatCharacterCreateNoCriteria(body string) entrycharacterservice.CreateNoCriteria {
	v := entrycharacterservice.CreateNoCriteria(body)

	return v
}

// NewGetCharacterCharacterOK builds a "EntryCharacterService" service
// "getCharacter" endpoint result from a HTTP "OK" response.
func NewGetCharacterCharacterOK(body *GetCharacterResponseBody) *entrycharacterservice.Character {
	v := &entrycharacterservice.Character{
		ID:          *body.ID,
		Name:        *body.Name,
		Description: *body.Description,
		Health:      *body.Health,
		Experience:  *body.Experience,
		InventoryID: *body.InventoryID,
	}

	return v
}

// NewGetCharacterGetInvalidArgs builds a EntryCharacterService service
// getCharacter endpoint get_invalid_args error.
func NewGetCharacterGetInvalidArgs(body string) entrycharacterservice.GetInvalidArgs {
	v := entrycharacterservice.GetInvalidArgs(body)

	return v
}

// NewGetCharacterGetNoCriteria builds a EntryCharacterService service
// getCharacter endpoint get_no_criteria error.
func NewGetCharacterGetNoCriteria(body string) entrycharacterservice.GetNoCriteria {
	v := entrycharacterservice.GetNoCriteria(body)

	return v
}

// NewGetCharacterGetNoMatch builds a EntryCharacterService service
// getCharacter endpoint get_no_match error.
func NewGetCharacterGetNoMatch(body string) entrycharacterservice.GetNoMatch {
	v := entrycharacterservice.GetNoMatch(body)

	return v
}

// NewUpdateCharacterNoCriteria builds a EntryCharacterService service
// updateCharacter endpoint no_criteria error.
func NewUpdateCharacterNoCriteria(body string) entrycharacterservice.NoCriteria {
	v := entrycharacterservice.NoCriteria(body)

	return v
}

// NewUpdateCharacterUpdateInvalidArgs builds a EntryCharacterService service
// updateCharacter endpoint update_invalid_args error.
func NewUpdateCharacterUpdateInvalidArgs(body string) entrycharacterservice.UpdateInvalidArgs {
	v := entrycharacterservice.UpdateInvalidArgs(body)

	return v
}

// NewUpdateCharacterUpdateNoMatch builds a EntryCharacterService service
// updateCharacter endpoint update_no_match error.
func NewUpdateCharacterUpdateNoMatch(body string) entrycharacterservice.UpdateNoMatch {
	v := entrycharacterservice.UpdateNoMatch(body)

	return v
}

// NewDeleteCharacterDeleteInvalidArgs builds a EntryCharacterService service
// deleteCharacter endpoint delete_invalid_args error.
func NewDeleteCharacterDeleteInvalidArgs(body string) entrycharacterservice.DeleteInvalidArgs {
	v := entrycharacterservice.DeleteInvalidArgs(body)

	return v
}

// NewDeleteCharacterNoCriteria builds a EntryCharacterService service
// deleteCharacter endpoint no_criteria error.
func NewDeleteCharacterNoCriteria(body string) entrycharacterservice.NoCriteria {
	v := entrycharacterservice.NoCriteria(body)

	return v
}

// NewDeleteCharacterDeleteNoMatch builds a EntryCharacterService service
// deleteCharacter endpoint delete_no_match error.
func NewDeleteCharacterDeleteNoMatch(body string) entrycharacterservice.DeleteNoMatch {
	v := entrycharacterservice.DeleteNoMatch(body)

	return v
}

// ValidateCreatCharacterResponseBody runs the validations defined on
// CreatCharacterResponseBody
func ValidateCreatCharacterResponseBody(body *CreatCharacterResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	if body.InventoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inventoryId", "body"))
	}
	return
}

// ValidateGetCharacterResponseBody runs the validations defined on
// GetCharacterResponseBody
func ValidateGetCharacterResponseBody(body *GetCharacterResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Health == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("health", "body"))
	}
	if body.Experience == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("experience", "body"))
	}
	if body.InventoryID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("inventoryId", "body"))
	}
	return
}
