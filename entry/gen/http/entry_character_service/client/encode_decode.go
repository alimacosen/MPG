// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryCharacterService HTTP client encoders and decoders
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	"bytes"
	"context"
	"io"
	entrycharacterservice "mpg/entry/gen/entry_character_service"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildCreateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "EntryCharacterService" service "createCharacter"
// endpoint
func (c *Client) BuildCreateCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateCharacterEntryCharacterServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryCharacterService", "createCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateCharacterRequest returns an encoder for requests sent to the
// EntryCharacterService createCharacter server.
func EncodeCreateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*entrycharacterservice.CreateCharacterPayload)
		if !ok {
			return goahttp.ErrInvalidType("EntryCharacterService", "createCharacter", "*entrycharacterservice.CreateCharacterPayload", v)
		}
		body := NewCreateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("EntryCharacterService", "createCharacter", err)
		}
		return nil
	}
}

// DecodeCreateCharacterResponse returns a decoder for responses returned by
// the EntryCharacterService createCharacter endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeCreateCharacterResponse may return the following errors:
//   - "create_invalid_args" (type entrycharacterservice.CreateInvalidArgs): http.StatusBadRequest
//   - "create_no_criteria" (type entrycharacterservice.CreateNoCriteria): http.StatusBadRequest
//   - error: internal error
func DecodeCreateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "createCharacter", err)
			}
			err = ValidateCreateCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("EntryCharacterService", "createCharacter", err)
			}
			res := NewCreateCharacterCharacterOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "create_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "createCharacter", err)
				}
				return nil, NewCreateCharacterCreateInvalidArgs(body)
			case "create_no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "createCharacter", err)
				}
				return nil, NewCreateCharacterCreateNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "createCharacter", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "createCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildGetCharacterRequest instantiates a HTTP request object with method and
// path set to call the "EntryCharacterService" service "getCharacter" endpoint
func (c *Client) BuildGetCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*entrycharacterservice.GetCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("EntryCharacterService", "getCharacter", "*entrycharacterservice.GetCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetCharacterEntryCharacterServicePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryCharacterService", "getCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetCharacterResponse returns a decoder for responses returned by the
// EntryCharacterService getCharacter endpoint. restoreBody controls whether
// the response body should be restored after having been read.
// DecodeGetCharacterResponse may return the following errors:
//   - "get_invalid_args" (type entrycharacterservice.GetInvalidArgs): http.StatusBadRequest
//   - "get_no_criteria" (type entrycharacterservice.GetNoCriteria): http.StatusBadRequest
//   - "get_no_match" (type entrycharacterservice.GetNoMatch): http.StatusNotFound
//   - error: internal error
func DecodeGetCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetCharacterResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "getCharacter", err)
			}
			err = ValidateGetCharacterResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("EntryCharacterService", "getCharacter", err)
			}
			res := NewGetCharacterCharacterOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "get_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "getCharacter", err)
				}
				return nil, NewGetCharacterGetInvalidArgs(body)
			case "get_no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "getCharacter", err)
				}
				return nil, NewGetCharacterGetNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "getCharacter", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "getCharacter", err)
			}
			return nil, NewGetCharacterGetNoMatch(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "getCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateCharacterRequest instantiates a HTTP request object with method
// and path set to call the "EntryCharacterService" service "updateCharacter"
// endpoint
func (c *Client) BuildUpdateCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*entrycharacterservice.UpdateCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("EntryCharacterService", "updateCharacter", "*entrycharacterservice.UpdateCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateCharacterEntryCharacterServicePath(id)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryCharacterService", "updateCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateCharacterRequest returns an encoder for requests sent to the
// EntryCharacterService updateCharacter server.
func EncodeUpdateCharacterRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*entrycharacterservice.UpdateCharacterPayload)
		if !ok {
			return goahttp.ErrInvalidType("EntryCharacterService", "updateCharacter", "*entrycharacterservice.UpdateCharacterPayload", v)
		}
		body := NewUpdateCharacterRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("EntryCharacterService", "updateCharacter", err)
		}
		return nil
	}
}

// DecodeUpdateCharacterResponse returns a decoder for responses returned by
// the EntryCharacterService updateCharacter endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeUpdateCharacterResponse may return the following errors:
//   - "no_criteria" (type entrycharacterservice.NoCriteria): http.StatusBadRequest
//   - "update_invalid_args" (type entrycharacterservice.UpdateInvalidArgs): http.StatusBadRequest
//   - "update_no_match" (type entrycharacterservice.UpdateNoMatch): http.StatusNotFound
//   - error: internal error
func DecodeUpdateCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "updateCharacter", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "updateCharacter", err)
				}
				return nil, NewUpdateCharacterNoCriteria(body)
			case "update_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "updateCharacter", err)
				}
				return nil, NewUpdateCharacterUpdateInvalidArgs(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "updateCharacter", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "updateCharacter", err)
			}
			return nil, NewUpdateCharacterUpdateNoMatch(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "updateCharacter", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteCharacterRequest instantiates a HTTP request object with method
// and path set to call the "EntryCharacterService" service "deleteCharacter"
// endpoint
func (c *Client) BuildDeleteCharacterRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*entrycharacterservice.DeleteCharacterPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("EntryCharacterService", "deleteCharacter", "*entrycharacterservice.DeleteCharacterPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteCharacterEntryCharacterServicePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryCharacterService", "deleteCharacter", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteCharacterResponse returns a decoder for responses returned by
// the EntryCharacterService deleteCharacter endpoint. restoreBody controls
// whether the response body should be restored after having been read.
// DecodeDeleteCharacterResponse may return the following errors:
//   - "delete_invalid_args" (type entrycharacterservice.DeleteInvalidArgs): http.StatusBadRequest
//   - "no_criteria" (type entrycharacterservice.NoCriteria): http.StatusBadRequest
//   - "delete_no_match" (type entrycharacterservice.DeleteNoMatch): http.StatusNotFound
//   - error: internal error
func DecodeDeleteCharacterResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "deleteCharacter", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "delete_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "deleteCharacter", err)
				}
				return nil, NewDeleteCharacterDeleteInvalidArgs(body)
			case "no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryCharacterService", "deleteCharacter", err)
				}
				return nil, NewDeleteCharacterNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "deleteCharacter", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryCharacterService", "deleteCharacter", err)
			}
			return nil, NewDeleteCharacterDeleteNoMatch(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryCharacterService", "deleteCharacter", resp.StatusCode, string(body))
		}
	}
}
