// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryCharacterService HTTP client CLI support package
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	"encoding/json"
	"fmt"
	entrycharacterservice "mpg/entry/gen/entry_character_service"
)

// BuildCreateCharacterPayload builds the payload for the EntryCharacterService
// createCharacter endpoint from CLI flags.
func BuildCreateCharacterPayload(entryCharacterServiceCreateCharacterBody string) (*entrycharacterservice.CreateCharacterPayload, error) {
	var err error
	var body CreateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(entryCharacterServiceCreateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Est numquam quibusdam sunt vero.\",\n      \"name\": \"Dicta modi quas placeat eaque.\"\n   }'")
		}
	}
	v := &entrycharacterservice.CreateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
	}

	return v, nil
}

// BuildGetCharacterPayload builds the payload for the EntryCharacterService
// getCharacter endpoint from CLI flags.
func BuildGetCharacterPayload(entryCharacterServiceGetCharacterID string) (*entrycharacterservice.GetCharacterPayload, error) {
	var id string
	{
		id = entryCharacterServiceGetCharacterID
	}
	v := &entrycharacterservice.GetCharacterPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateCharacterPayload builds the payload for the EntryCharacterService
// updateCharacter endpoint from CLI flags.
func BuildUpdateCharacterPayload(entryCharacterServiceUpdateCharacterBody string, entryCharacterServiceUpdateCharacterID string) (*entrycharacterservice.UpdateCharacterPayload, error) {
	var err error
	var body UpdateCharacterRequestBody
	{
		err = json.Unmarshal([]byte(entryCharacterServiceUpdateCharacterBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"description\": \"Ut velit vel impedit est et.\",\n      \"experience\": 4260254307231964385,\n      \"health\": 5285512784116714502,\n      \"name\": \"In ut deleniti nesciunt impedit alias voluptatem.\"\n   }'")
		}
	}
	var id string
	{
		id = entryCharacterServiceUpdateCharacterID
	}
	v := &entrycharacterservice.UpdateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteCharacterPayload builds the payload for the EntryCharacterService
// deleteCharacter endpoint from CLI flags.
func BuildDeleteCharacterPayload(entryCharacterServiceDeleteCharacterID string) (*entrycharacterservice.DeleteCharacterPayload, error) {
	var id string
	{
		id = entryCharacterServiceDeleteCharacterID
	}
	v := &entrycharacterservice.DeleteCharacterPayload{}
	v.ID = id

	return v, nil
}
