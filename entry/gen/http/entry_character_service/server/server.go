// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryCharacterService HTTP server
//
// Command:
// $ goa gen mpg/entry/design

package server

import (
	"context"
	entrycharacterservice "mpg/entry/gen/entry_character_service"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the EntryCharacterService service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	CreatCharacter  http.Handler
	GetCharacter    http.Handler
	UpdateCharacter http.Handler
	DeleteCharacter http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the EntryCharacterService service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *entrycharacterservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreatCharacter", "POST", "/character"},
			{"GetCharacter", "GET", "/character/{id}"},
			{"UpdateCharacter", "PATCH", "/character/{id}"},
			{"DeleteCharacter", "DELETE", "/character/{id}"},
		},
		CreatCharacter:  NewCreatCharacterHandler(e.CreatCharacter, mux, decoder, encoder, errhandler, formatter),
		GetCharacter:    NewGetCharacterHandler(e.GetCharacter, mux, decoder, encoder, errhandler, formatter),
		UpdateCharacter: NewUpdateCharacterHandler(e.UpdateCharacter, mux, decoder, encoder, errhandler, formatter),
		DeleteCharacter: NewDeleteCharacterHandler(e.DeleteCharacter, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "EntryCharacterService" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreatCharacter = m(s.CreatCharacter)
	s.GetCharacter = m(s.GetCharacter)
	s.UpdateCharacter = m(s.UpdateCharacter)
	s.DeleteCharacter = m(s.DeleteCharacter)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return entrycharacterservice.MethodNames[:] }

// Mount configures the mux to serve the EntryCharacterService endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreatCharacterHandler(mux, h.CreatCharacter)
	MountGetCharacterHandler(mux, h.GetCharacter)
	MountUpdateCharacterHandler(mux, h.UpdateCharacter)
	MountDeleteCharacterHandler(mux, h.DeleteCharacter)
}

// Mount configures the mux to serve the EntryCharacterService endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreatCharacterHandler configures the mux to serve the
// "EntryCharacterService" service "creatCharacter" endpoint.
func MountCreatCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/character", f)
}

// NewCreatCharacterHandler creates a HTTP handler which loads the HTTP request
// and calls the "EntryCharacterService" service "creatCharacter" endpoint.
func NewCreatCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatCharacterRequest(mux, decoder)
		encodeResponse = EncodeCreatCharacterResponse(encoder)
		encodeError    = EncodeCreatCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "creatCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryCharacterService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCharacterHandler configures the mux to serve the
// "EntryCharacterService" service "getCharacter" endpoint.
func MountGetCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/character/{id}", f)
}

// NewGetCharacterHandler creates a HTTP handler which loads the HTTP request
// and calls the "EntryCharacterService" service "getCharacter" endpoint.
func NewGetCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetCharacterRequest(mux, decoder)
		encodeResponse = EncodeGetCharacterResponse(encoder)
		encodeError    = EncodeGetCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryCharacterService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateCharacterHandler configures the mux to serve the
// "EntryCharacterService" service "updateCharacter" endpoint.
func MountUpdateCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/character/{id}", f)
}

// NewUpdateCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "EntryCharacterService" service "updateCharacter"
// endpoint.
func NewUpdateCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateCharacterRequest(mux, decoder)
		encodeResponse = EncodeUpdateCharacterResponse(encoder)
		encodeError    = EncodeUpdateCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryCharacterService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteCharacterHandler configures the mux to serve the
// "EntryCharacterService" service "deleteCharacter" endpoint.
func MountDeleteCharacterHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/character/{id}", f)
}

// NewDeleteCharacterHandler creates a HTTP handler which loads the HTTP
// request and calls the "EntryCharacterService" service "deleteCharacter"
// endpoint.
func NewDeleteCharacterHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteCharacterRequest(mux, decoder)
		encodeResponse = EncodeDeleteCharacterResponse(encoder)
		encodeError    = EncodeDeleteCharacterError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteCharacter")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryCharacterService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
