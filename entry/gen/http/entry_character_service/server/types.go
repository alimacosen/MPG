// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryCharacterService HTTP server types
//
// Command:
// $ goa gen mpg/entry/design

package server

import (
	entrycharacterservice "mpg/entry/gen/entry_character_service"

	goa "goa.design/goa/v3/pkg"
)

// CreateCharacterRequestBody is the type of the "EntryCharacterService"
// service "createCharacter" endpoint HTTP request body.
type CreateCharacterRequestBody struct {
	// Name of the Character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the Character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
}

// UpdateCharacterRequestBody is the type of the "EntryCharacterService"
// service "updateCharacter" endpoint HTTP request body.
type UpdateCharacterRequestBody struct {
	// Name of the Character
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Description of the Character
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// The amount of health value of the Character
	Health *int `form:"health,omitempty" json:"health,omitempty" xml:"health,omitempty"`
	// The amount of experience value of the Character
	Experience *int `form:"experience,omitempty" json:"experience,omitempty" xml:"experience,omitempty"`
}

// CreateCharacterResponseBody is the type of the "EntryCharacterService"
// service "createCharacter" endpoint HTTP response body.
type CreateCharacterResponseBody struct {
	// UUId of the character
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the character
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the character
	Description string `form:"description" json:"description" xml:"description"`
	// The amount of health value of the character
	Health int `form:"health" json:"health" xml:"health"`
	// The amount of experience value of the character
	Experience int `form:"experience" json:"experience" xml:"experience"`
	// UUId of the inventory record
	InventoryID string `form:"inventoryId" json:"inventoryId" xml:"inventoryId"`
}

// GetCharacterResponseBody is the type of the "EntryCharacterService" service
// "getCharacter" endpoint HTTP response body.
type GetCharacterResponseBody struct {
	// UUId of the character
	ID string `form:"id" json:"id" xml:"id"`
	// Name of the character
	Name string `form:"name" json:"name" xml:"name"`
	// Description of the character
	Description string `form:"description" json:"description" xml:"description"`
	// The amount of health value of the character
	Health int `form:"health" json:"health" xml:"health"`
	// The amount of experience value of the character
	Experience int `form:"experience" json:"experience" xml:"experience"`
	// UUId of the inventory record
	InventoryID string `form:"inventoryId" json:"inventoryId" xml:"inventoryId"`
}

// NewCreateCharacterResponseBody builds the HTTP response body from the result
// of the "createCharacter" endpoint of the "EntryCharacterService" service.
func NewCreateCharacterResponseBody(res *entrycharacterservice.Character) *CreateCharacterResponseBody {
	body := &CreateCharacterResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
		InventoryID: res.InventoryID,
	}
	return body
}

// NewGetCharacterResponseBody builds the HTTP response body from the result of
// the "getCharacter" endpoint of the "EntryCharacterService" service.
func NewGetCharacterResponseBody(res *entrycharacterservice.Character) *GetCharacterResponseBody {
	body := &GetCharacterResponseBody{
		ID:          res.ID,
		Name:        res.Name,
		Description: res.Description,
		Health:      res.Health,
		Experience:  res.Experience,
		InventoryID: res.InventoryID,
	}
	return body
}

// NewCreateCharacterPayload builds a EntryCharacterService service
// createCharacter endpoint payload.
func NewCreateCharacterPayload(body *CreateCharacterRequestBody) *entrycharacterservice.CreateCharacterPayload {
	v := &entrycharacterservice.CreateCharacterPayload{
		Name:        *body.Name,
		Description: body.Description,
	}

	return v
}

// NewGetCharacterPayload builds a EntryCharacterService service getCharacter
// endpoint payload.
func NewGetCharacterPayload(id string) *entrycharacterservice.GetCharacterPayload {
	v := &entrycharacterservice.GetCharacterPayload{}
	v.ID = id

	return v
}

// NewUpdateCharacterPayload builds a EntryCharacterService service
// updateCharacter endpoint payload.
func NewUpdateCharacterPayload(body *UpdateCharacterRequestBody, id string) *entrycharacterservice.UpdateCharacterPayload {
	v := &entrycharacterservice.UpdateCharacterPayload{
		Name:        body.Name,
		Description: body.Description,
		Health:      body.Health,
		Experience:  body.Experience,
	}
	v.ID = id

	return v
}

// NewDeleteCharacterPayload builds a EntryCharacterService service
// deleteCharacter endpoint payload.
func NewDeleteCharacterPayload(id string) *entrycharacterservice.DeleteCharacterPayload {
	v := &entrycharacterservice.DeleteCharacterPayload{}
	v.ID = id

	return v
}

// ValidateCreateCharacterRequestBody runs the validations defined on
// CreateCharacterRequestBody
func ValidateCreateCharacterRequestBody(body *CreateCharacterRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}
