// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryItemService HTTP client encoders and decoders
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	"bytes"
	"context"
	"io"
	entryitemservice "mpg/entry/gen/entry_item_service"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildCreateItemRequest instantiates a HTTP request object with method and
// path set to call the "EntryItemService" service "createItem" endpoint
func (c *Client) BuildCreateItemRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateItemEntryItemServicePath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryItemService", "createItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateItemRequest returns an encoder for requests sent to the
// EntryItemService createItem server.
func EncodeCreateItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*entryitemservice.CreateItemPayload)
		if !ok {
			return goahttp.ErrInvalidType("EntryItemService", "createItem", "*entryitemservice.CreateItemPayload", v)
		}
		body := NewCreateItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("EntryItemService", "createItem", err)
		}
		return nil
	}
}

// DecodeCreateItemResponse returns a decoder for responses returned by the
// EntryItemService createItem endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeCreateItemResponse may return the following errors:
//   - "create_duplicated_name" (type entryitemservice.CreateDuplicatedName): http.StatusBadRequest
//   - "create_invalid_args" (type entryitemservice.CreateInvalidArgs): http.StatusBadRequest
//   - "create_no_criteria" (type entryitemservice.CreateNoCriteria): http.StatusBadRequest
//   - error: internal error
func DecodeCreateItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "createItem", err)
			}
			err = ValidateCreateItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("EntryItemService", "createItem", err)
			}
			res := NewCreateItemItemOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "create_duplicated_name":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "createItem", err)
				}
				return nil, NewCreateItemCreateDuplicatedName(body)
			case "create_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "createItem", err)
				}
				return nil, NewCreateItemCreateInvalidArgs(body)
			case "create_no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "createItem", err)
				}
				return nil, NewCreateItemCreateNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryItemService", "createItem", resp.StatusCode, string(body))
			}
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryItemService", "createItem", resp.StatusCode, string(body))
		}
	}
}

// BuildGetItemRequest instantiates a HTTP request object with method and path
// set to call the "EntryItemService" service "getItem" endpoint
func (c *Client) BuildGetItemRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*entryitemservice.GetItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("EntryItemService", "getItem", "*entryitemservice.GetItemPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetItemEntryItemServicePath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryItemService", "getItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetItemResponse returns a decoder for responses returned by the
// EntryItemService getItem endpoint. restoreBody controls whether the response
// body should be restored after having been read.
// DecodeGetItemResponse may return the following errors:
//   - "get_invalid_args" (type entryitemservice.GetInvalidArgs): http.StatusBadRequest
//   - "get_no_criteria" (type entryitemservice.GetNoCriteria): http.StatusBadRequest
//   - "get_no_match" (type entryitemservice.GetNoMatch): http.StatusNotFound
//   - error: internal error
func DecodeGetItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetItemResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "getItem", err)
			}
			err = ValidateGetItemResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("EntryItemService", "getItem", err)
			}
			res := NewGetItemItemOK(&body)
			return res, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "get_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "getItem", err)
				}
				return nil, NewGetItemGetInvalidArgs(body)
			case "get_no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "getItem", err)
				}
				return nil, NewGetItemGetNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryItemService", "getItem", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "getItem", err)
			}
			return nil, NewGetItemGetNoMatch(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryItemService", "getItem", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateItemRequest instantiates a HTTP request object with method and
// path set to call the "EntryItemService" service "updateItem" endpoint
func (c *Client) BuildUpdateItemRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*entryitemservice.UpdateItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("EntryItemService", "updateItem", "*entryitemservice.UpdateItemPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateItemEntryItemServicePath(id)}
	req, err := http.NewRequest("PATCH", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryItemService", "updateItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdateItemRequest returns an encoder for requests sent to the
// EntryItemService updateItem server.
func EncodeUpdateItemRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*entryitemservice.UpdateItemPayload)
		if !ok {
			return goahttp.ErrInvalidType("EntryItemService", "updateItem", "*entryitemservice.UpdateItemPayload", v)
		}
		body := NewUpdateItemRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("EntryItemService", "updateItem", err)
		}
		return nil
	}
}

// DecodeUpdateItemResponse returns a decoder for responses returned by the
// EntryItemService updateItem endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeUpdateItemResponse may return the following errors:
//   - "update_invalid_args" (type entryitemservice.UpdateInvalidArgs): http.StatusBadRequest
//   - "update_no_criteria" (type entryitemservice.UpdateNoCriteria): http.StatusBadRequest
//   - "update_no_match" (type entryitemservice.UpdateNoMatch): http.StatusNotFound
//   - error: internal error
func DecodeUpdateItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "updateItem", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "update_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "updateItem", err)
				}
				return nil, NewUpdateItemUpdateInvalidArgs(body)
			case "update_no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "updateItem", err)
				}
				return nil, NewUpdateItemUpdateNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryItemService", "updateItem", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "updateItem", err)
			}
			return nil, NewUpdateItemUpdateNoMatch(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryItemService", "updateItem", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteItemRequest instantiates a HTTP request object with method and
// path set to call the "EntryItemService" service "deleteItem" endpoint
func (c *Client) BuildDeleteItemRequest(ctx context.Context, v any) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*entryitemservice.DeleteItemPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("EntryItemService", "deleteItem", "*entryitemservice.DeleteItemPayload", v)
		}
		id = p.ID
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteItemEntryItemServicePath(id)}
	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("EntryItemService", "deleteItem", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeDeleteItemResponse returns a decoder for responses returned by the
// EntryItemService deleteItem endpoint. restoreBody controls whether the
// response body should be restored after having been read.
// DecodeDeleteItemResponse may return the following errors:
//   - "delete_invalid_args" (type entryitemservice.DeleteInvalidArgs): http.StatusBadRequest
//   - "delete_no_criteria" (type entryitemservice.DeleteNoCriteria): http.StatusBadRequest
//   - "delete_no_match" (type entryitemservice.DeleteNoMatch): http.StatusNotFound
//   - error: internal error
func DecodeDeleteItemResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body int
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "deleteItem", err)
			}
			return body, nil
		case http.StatusBadRequest:
			en := resp.Header.Get("goa-error")
			switch en {
			case "delete_invalid_args":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "deleteItem", err)
				}
				return nil, NewDeleteItemDeleteInvalidArgs(body)
			case "delete_no_criteria":
				var (
					body string
					err  error
				)
				err = decoder(resp).Decode(&body)
				if err != nil {
					return nil, goahttp.ErrDecodingError("EntryItemService", "deleteItem", err)
				}
				return nil, NewDeleteItemDeleteNoCriteria(body)
			default:
				body, _ := io.ReadAll(resp.Body)
				return nil, goahttp.ErrInvalidResponse("EntryItemService", "deleteItem", resp.StatusCode, string(body))
			}
		case http.StatusNotFound:
			var (
				body string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("EntryItemService", "deleteItem", err)
			}
			return nil, NewDeleteItemDeleteNoMatch(body)
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("EntryItemService", "deleteItem", resp.StatusCode, string(body))
		}
	}
}
