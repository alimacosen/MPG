// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryItemService HTTP client CLI support package
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	"encoding/json"
	"fmt"
	entryitemservice "mpg/entry/gen/entry_item_service"
)

// BuildCreateItemPayload builds the payload for the EntryItemService
// createItem endpoint from CLI flags.
func BuildCreateItemPayload(entryItemServiceCreateItemBody string) (*entryitemservice.CreateItemPayload, error) {
	var err error
	var body CreateItemRequestBody
	{
		err = json.Unmarshal([]byte(entryItemServiceCreateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 1446501656436104991,\n      \"description\": \"Porro excepturi quia tempore esse sapiente.\",\n      \"healing\": 8469736963636152442,\n      \"name\": \"Pariatur repellendus consequatur.\",\n      \"protection\": 7091603181480834472\n   }'")
		}
	}
	v := &entryitemservice.CreateItemPayload{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v, nil
}

// BuildGetItemsPayload builds the payload for the EntryItemService getItems
// endpoint from CLI flags.
func BuildGetItemsPayload(entryItemServiceGetItemsIds string) (*entryitemservice.GetItemsPayload, error) {
	var err error
	var ids []string
	{
		if entryItemServiceGetItemsIds != "" {
			err = json.Unmarshal([]byte(entryItemServiceGetItemsIds), &ids)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for ids, \nerror: %s, \nexample of valid JSON:\n%s", err, "'[\n      \"id1\",\n      \"id2\",\n      \"id3\"\n   ]'")
			}
		}
	}
	v := &entryitemservice.GetItemsPayload{}
	v.Ids = ids

	return v, nil
}

// BuildUpdateItemPayload builds the payload for the EntryItemService
// updateItem endpoint from CLI flags.
func BuildUpdateItemPayload(entryItemServiceUpdateItemBody string, entryItemServiceUpdateItemID string) (*entryitemservice.UpdateItemPayload, error) {
	var err error
	var body UpdateItemRequestBody
	{
		err = json.Unmarshal([]byte(entryItemServiceUpdateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 7370789085788686602,\n      \"description\": \"Sapiente harum sint et quo voluptas fugit.\",\n      \"healing\": 8579359920166379124,\n      \"name\": \"Neque et.\",\n      \"protection\": 8272555717849134277\n   }'")
		}
	}
	var id string
	{
		id = entryItemServiceUpdateItemID
	}
	v := &entryitemservice.UpdateItemPayload{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteItemPayload builds the payload for the EntryItemService
// deleteItem endpoint from CLI flags.
func BuildDeleteItemPayload(entryItemServiceDeleteItemID string) (*entryitemservice.DeleteItemPayload, error) {
	var id string
	{
		id = entryItemServiceDeleteItemID
	}
	v := &entryitemservice.DeleteItemPayload{}
	v.ID = id

	return v, nil
}
