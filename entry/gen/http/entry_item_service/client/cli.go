// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryItemService HTTP client CLI support package
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	"encoding/json"
	"fmt"
	entryitemservice "mpg/entry/gen/entry_item_service"
)

// BuildCreatItemPayload builds the payload for the EntryItemService creatItem
// endpoint from CLI flags.
func BuildCreatItemPayload(entryItemServiceCreatItemBody string) (*entryitemservice.CreatItemPayload, error) {
	var err error
	var body CreatItemRequestBody
	{
		err = json.Unmarshal([]byte(entryItemServiceCreatItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 1446501656436104991,\n      \"description\": \"Porro excepturi quia tempore esse sapiente.\",\n      \"healing\": 8469736963636152442,\n      \"name\": \"Pariatur repellendus consequatur.\",\n      \"protection\": 7091603181480834472\n   }'")
		}
	}
	v := &entryitemservice.CreatItemPayload{
		Name:        body.Name,
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}

	return v, nil
}

// BuildGetItemPayload builds the payload for the EntryItemService getItem
// endpoint from CLI flags.
func BuildGetItemPayload(entryItemServiceGetItemID string) (*entryitemservice.GetItemPayload, error) {
	var id string
	{
		id = entryItemServiceGetItemID
	}
	v := &entryitemservice.GetItemPayload{}
	v.ID = id

	return v, nil
}

// BuildUpdateItemPayload builds the payload for the EntryItemService
// updateItem endpoint from CLI flags.
func BuildUpdateItemPayload(entryItemServiceUpdateItemBody string, entryItemServiceUpdateItemID string) (*entryitemservice.UpdateItemPayload, error) {
	var err error
	var body UpdateItemRequestBody
	{
		err = json.Unmarshal([]byte(entryItemServiceUpdateItemBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"damage\": 8211760277916845929,\n      \"description\": \"Provident voluptas aspernatur.\",\n      \"healing\": 5410378431408351801,\n      \"protection\": 1138281801445593390\n   }'")
		}
	}
	var id string
	{
		id = entryItemServiceUpdateItemID
	}
	v := &entryitemservice.UpdateItemPayload{
		Description: body.Description,
		Damage:      body.Damage,
		Healing:     body.Healing,
		Protection:  body.Protection,
	}
	v.ID = id

	return v, nil
}

// BuildDeleteItemPayload builds the payload for the EntryItemService
// deleteItem endpoint from CLI flags.
func BuildDeleteItemPayload(entryItemServiceDeleteItemID string) (*entryitemservice.DeleteItemPayload, error) {
	var id string
	{
		id = entryItemServiceDeleteItemID
	}
	v := &entryitemservice.DeleteItemPayload{}
	v.ID = id

	return v, nil
}
