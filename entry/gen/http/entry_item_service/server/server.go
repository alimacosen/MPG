// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryItemService HTTP server
//
// Command:
// $ goa gen mpg/entry/design

package server

import (
	"context"
	entryitemservice "mpg/entry/gen/entry_item_service"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the EntryItemService service endpoint HTTP handlers.
type Server struct {
	Mounts     []*MountPoint
	CreatItem  http.Handler
	GetItem    http.Handler
	UpdateItem http.Handler
	DeleteItem http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the EntryItemService service
// endpoints using the provided encoder and decoder. The handlers are mounted
// on the given mux using the HTTP verb and path defined in the design.
// errhandler is called whenever a response fails to be encoded. formatter is
// used to format errors returned by the service methods prior to encoding.
// Both errhandler and formatter are optional and can be nil.
func New(
	e *entryitemservice.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"CreatItem", "POST", "/item"},
			{"GetItem", "GET", "/item/{id}"},
			{"UpdateItem", "PATCH", "/item/{id}"},
			{"DeleteItem", "DELETE", "/item/{id}"},
		},
		CreatItem:  NewCreatItemHandler(e.CreatItem, mux, decoder, encoder, errhandler, formatter),
		GetItem:    NewGetItemHandler(e.GetItem, mux, decoder, encoder, errhandler, formatter),
		UpdateItem: NewUpdateItemHandler(e.UpdateItem, mux, decoder, encoder, errhandler, formatter),
		DeleteItem: NewDeleteItemHandler(e.DeleteItem, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "EntryItemService" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.CreatItem = m(s.CreatItem)
	s.GetItem = m(s.GetItem)
	s.UpdateItem = m(s.UpdateItem)
	s.DeleteItem = m(s.DeleteItem)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return entryitemservice.MethodNames[:] }

// Mount configures the mux to serve the EntryItemService endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountCreatItemHandler(mux, h.CreatItem)
	MountGetItemHandler(mux, h.GetItem)
	MountUpdateItemHandler(mux, h.UpdateItem)
	MountDeleteItemHandler(mux, h.DeleteItem)
}

// Mount configures the mux to serve the EntryItemService endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountCreatItemHandler configures the mux to serve the "EntryItemService"
// service "creatItem" endpoint.
func MountCreatItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/item", f)
}

// NewCreatItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "EntryItemService" service "creatItem" endpoint.
func NewCreatItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreatItemRequest(mux, decoder)
		encodeResponse = EncodeCreatItemResponse(encoder)
		encodeError    = EncodeCreatItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "creatItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryItemService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetItemHandler configures the mux to serve the "EntryItemService"
// service "getItem" endpoint.
func MountGetItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/item/{id}", f)
}

// NewGetItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "EntryItemService" service "getItem" endpoint.
func NewGetItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetItemRequest(mux, decoder)
		encodeResponse = EncodeGetItemResponse(encoder)
		encodeError    = EncodeGetItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryItemService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateItemHandler configures the mux to serve the "EntryItemService"
// service "updateItem" endpoint.
func MountUpdateItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/item/{id}", f)
}

// NewUpdateItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "EntryItemService" service "updateItem" endpoint.
func NewUpdateItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateItemRequest(mux, decoder)
		encodeResponse = EncodeUpdateItemResponse(encoder)
		encodeError    = EncodeUpdateItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryItemService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteItemHandler configures the mux to serve the "EntryItemService"
// service "deleteItem" endpoint.
func MountDeleteItemHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/item/{id}", f)
}

// NewDeleteItemHandler creates a HTTP handler which loads the HTTP request and
// calls the "EntryItemService" service "deleteItem" endpoint.
func NewDeleteItemHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteItemRequest(mux, decoder)
		encodeResponse = EncodeDeleteItemResponse(encoder)
		encodeError    = EncodeDeleteItemError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteItem")
		ctx = context.WithValue(ctx, goa.ServiceKey, "EntryItemService")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
