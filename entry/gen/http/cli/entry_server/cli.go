// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryServer HTTP client CLI support package
//
// Command:
// $ goa gen mpg/entry/design

package cli

import (
	"flag"
	"fmt"
	entrycharacterservicec "mpg/entry/gen/http/entry_character_service/client"
	entryinventoryservicec "mpg/entry/gen/http/entry_inventory_service/client"
	entryitemservicec "mpg/entry/gen/http/entry_item_service/client"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `entry-character-service (create-character|get-character|update-character|delete-character)
entry-inventory-service (get-inventory|update-inventory)
entry-item-service (create-item|get-items|update-item|delete-item)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` entry-character-service create-character --body '{
      "description": "Quibusdam sunt vero quia tempora dolor repellat.",
      "name": "Et est."
   }'` + "\n" +
		os.Args[0] + ` entry-inventory-service get-inventory --id "Amet reprehenderit ea."` + "\n" +
		os.Args[0] + ` entry-item-service create-item --body '{
      "damage": 1446501656436104991,
      "description": "Porro excepturi quia tempore esse sapiente.",
      "healing": 8469736963636152442,
      "name": "Pariatur repellendus consequatur.",
      "protection": 7091603181480834472
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		entryCharacterServiceFlags = flag.NewFlagSet("entry-character-service", flag.ContinueOnError)

		entryCharacterServiceCreateCharacterFlags    = flag.NewFlagSet("create-character", flag.ExitOnError)
		entryCharacterServiceCreateCharacterBodyFlag = entryCharacterServiceCreateCharacterFlags.String("body", "REQUIRED", "")

		entryCharacterServiceGetCharacterFlags  = flag.NewFlagSet("get-character", flag.ExitOnError)
		entryCharacterServiceGetCharacterIDFlag = entryCharacterServiceGetCharacterFlags.String("id", "REQUIRED", "UUId of the Character")

		entryCharacterServiceUpdateCharacterFlags    = flag.NewFlagSet("update-character", flag.ExitOnError)
		entryCharacterServiceUpdateCharacterBodyFlag = entryCharacterServiceUpdateCharacterFlags.String("body", "REQUIRED", "")
		entryCharacterServiceUpdateCharacterIDFlag   = entryCharacterServiceUpdateCharacterFlags.String("id", "REQUIRED", "UUId of the Character")

		entryCharacterServiceDeleteCharacterFlags  = flag.NewFlagSet("delete-character", flag.ExitOnError)
		entryCharacterServiceDeleteCharacterIDFlag = entryCharacterServiceDeleteCharacterFlags.String("id", "REQUIRED", "UUId of the Character")

		entryInventoryServiceFlags = flag.NewFlagSet("entry-inventory-service", flag.ContinueOnError)

		entryInventoryServiceGetInventoryFlags  = flag.NewFlagSet("get-inventory", flag.ExitOnError)
		entryInventoryServiceGetInventoryIDFlag = entryInventoryServiceGetInventoryFlags.String("id", "REQUIRED", "UUId of the inventory")

		entryInventoryServiceUpdateInventoryFlags    = flag.NewFlagSet("update-inventory", flag.ExitOnError)
		entryInventoryServiceUpdateInventoryBodyFlag = entryInventoryServiceUpdateInventoryFlags.String("body", "REQUIRED", "")
		entryInventoryServiceUpdateInventoryIDFlag   = entryInventoryServiceUpdateInventoryFlags.String("id", "REQUIRED", "UUId of the Inventory")

		entryItemServiceFlags = flag.NewFlagSet("entry-item-service", flag.ContinueOnError)

		entryItemServiceCreateItemFlags    = flag.NewFlagSet("create-item", flag.ExitOnError)
		entryItemServiceCreateItemBodyFlag = entryItemServiceCreateItemFlags.String("body", "REQUIRED", "")

		entryItemServiceGetItemsFlags   = flag.NewFlagSet("get-items", flag.ExitOnError)
		entryItemServiceGetItemsIdsFlag = entryItemServiceGetItemsFlags.String("ids", "", "")

		entryItemServiceUpdateItemFlags    = flag.NewFlagSet("update-item", flag.ExitOnError)
		entryItemServiceUpdateItemBodyFlag = entryItemServiceUpdateItemFlags.String("body", "REQUIRED", "")
		entryItemServiceUpdateItemIDFlag   = entryItemServiceUpdateItemFlags.String("id", "REQUIRED", "UUId of the item")

		entryItemServiceDeleteItemFlags  = flag.NewFlagSet("delete-item", flag.ExitOnError)
		entryItemServiceDeleteItemIDFlag = entryItemServiceDeleteItemFlags.String("id", "REQUIRED", "UUId of the item")
	)
	entryCharacterServiceFlags.Usage = entryCharacterServiceUsage
	entryCharacterServiceCreateCharacterFlags.Usage = entryCharacterServiceCreateCharacterUsage
	entryCharacterServiceGetCharacterFlags.Usage = entryCharacterServiceGetCharacterUsage
	entryCharacterServiceUpdateCharacterFlags.Usage = entryCharacterServiceUpdateCharacterUsage
	entryCharacterServiceDeleteCharacterFlags.Usage = entryCharacterServiceDeleteCharacterUsage

	entryInventoryServiceFlags.Usage = entryInventoryServiceUsage
	entryInventoryServiceGetInventoryFlags.Usage = entryInventoryServiceGetInventoryUsage
	entryInventoryServiceUpdateInventoryFlags.Usage = entryInventoryServiceUpdateInventoryUsage

	entryItemServiceFlags.Usage = entryItemServiceUsage
	entryItemServiceCreateItemFlags.Usage = entryItemServiceCreateItemUsage
	entryItemServiceGetItemsFlags.Usage = entryItemServiceGetItemsUsage
	entryItemServiceUpdateItemFlags.Usage = entryItemServiceUpdateItemUsage
	entryItemServiceDeleteItemFlags.Usage = entryItemServiceDeleteItemUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "entry-character-service":
			svcf = entryCharacterServiceFlags
		case "entry-inventory-service":
			svcf = entryInventoryServiceFlags
		case "entry-item-service":
			svcf = entryItemServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "entry-character-service":
			switch epn {
			case "create-character":
				epf = entryCharacterServiceCreateCharacterFlags

			case "get-character":
				epf = entryCharacterServiceGetCharacterFlags

			case "update-character":
				epf = entryCharacterServiceUpdateCharacterFlags

			case "delete-character":
				epf = entryCharacterServiceDeleteCharacterFlags

			}

		case "entry-inventory-service":
			switch epn {
			case "get-inventory":
				epf = entryInventoryServiceGetInventoryFlags

			case "update-inventory":
				epf = entryInventoryServiceUpdateInventoryFlags

			}

		case "entry-item-service":
			switch epn {
			case "create-item":
				epf = entryItemServiceCreateItemFlags

			case "get-items":
				epf = entryItemServiceGetItemsFlags

			case "update-item":
				epf = entryItemServiceUpdateItemFlags

			case "delete-item":
				epf = entryItemServiceDeleteItemFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "entry-character-service":
			c := entrycharacterservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-character":
				endpoint = c.CreateCharacter()
				data, err = entrycharacterservicec.BuildCreateCharacterPayload(*entryCharacterServiceCreateCharacterBodyFlag)
			case "get-character":
				endpoint = c.GetCharacter()
				data, err = entrycharacterservicec.BuildGetCharacterPayload(*entryCharacterServiceGetCharacterIDFlag)
			case "update-character":
				endpoint = c.UpdateCharacter()
				data, err = entrycharacterservicec.BuildUpdateCharacterPayload(*entryCharacterServiceUpdateCharacterBodyFlag, *entryCharacterServiceUpdateCharacterIDFlag)
			case "delete-character":
				endpoint = c.DeleteCharacter()
				data, err = entrycharacterservicec.BuildDeleteCharacterPayload(*entryCharacterServiceDeleteCharacterIDFlag)
			}
		case "entry-inventory-service":
			c := entryinventoryservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-inventory":
				endpoint = c.GetInventory()
				data, err = entryinventoryservicec.BuildGetInventoryPayload(*entryInventoryServiceGetInventoryIDFlag)
			case "update-inventory":
				endpoint = c.UpdateInventory()
				data, err = entryinventoryservicec.BuildUpdateInventoryPayload(*entryInventoryServiceUpdateInventoryBodyFlag, *entryInventoryServiceUpdateInventoryIDFlag)
			}
		case "entry-item-service":
			c := entryitemservicec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-item":
				endpoint = c.CreateItem()
				data, err = entryitemservicec.BuildCreateItemPayload(*entryItemServiceCreateItemBodyFlag)
			case "get-items":
				endpoint = c.GetItems()
				data, err = entryitemservicec.BuildGetItemsPayload(*entryItemServiceGetItemsIdsFlag)
			case "update-item":
				endpoint = c.UpdateItem()
				data, err = entryitemservicec.BuildUpdateItemPayload(*entryItemServiceUpdateItemBodyFlag, *entryItemServiceUpdateItemIDFlag)
			case "delete-item":
				endpoint = c.DeleteItem()
				data, err = entryitemservicec.BuildDeleteItemPayload(*entryItemServiceDeleteItemIDFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// entry-character-serviceUsage displays the usage of the
// entry-character-service command and its subcommands.
func entryCharacterServiceUsage() {
	fmt.Fprintf(os.Stderr, `The entry character service communicates with characters microservice.
Usage:
    %[1]s [globalflags] entry-character-service COMMAND [flags]

COMMAND:
    create-character: CreateCharacter implements createCharacter.
    get-character: GetCharacter implements getCharacter.
    update-character: UpdateCharacter implements updateCharacter.
    delete-character: DeleteCharacter implements deleteCharacter.

Additional help:
    %[1]s entry-character-service COMMAND --help
`, os.Args[0])
}
func entryCharacterServiceCreateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-character-service create-character -body JSON

CreateCharacter implements createCharacter.
    -body JSON: 

Example:
    %[1]s entry-character-service create-character --body '{
      "description": "Quibusdam sunt vero quia tempora dolor repellat.",
      "name": "Et est."
   }'
`, os.Args[0])
}

func entryCharacterServiceGetCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-character-service get-character -id STRING

GetCharacter implements getCharacter.
    -id STRING: UUId of the Character

Example:
    %[1]s entry-character-service get-character --id "Hic aut iste deleniti."
`, os.Args[0])
}

func entryCharacterServiceUpdateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-character-service update-character -body JSON -id STRING

UpdateCharacter implements updateCharacter.
    -body JSON: 
    -id STRING: UUId of the Character

Example:
    %[1]s entry-character-service update-character --body '{
      "description": "Et sit eligendi optio iure.",
      "experience": 7024460863717845377,
      "health": 6587466712592608632,
      "name": "Ut velit vel impedit est et."
   }' --id "Aliquam cum."
`, os.Args[0])
}

func entryCharacterServiceDeleteCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-character-service delete-character -id STRING

DeleteCharacter implements deleteCharacter.
    -id STRING: UUId of the Character

Example:
    %[1]s entry-character-service delete-character --id "Modi totam provident ex magni sunt sunt."
`, os.Args[0])
}

// entry-inventory-serviceUsage displays the usage of the
// entry-inventory-service command and its subcommands.
func entryInventoryServiceUsage() {
	fmt.Fprintf(os.Stderr, `The entry inventory service communicates with inventory microservice.
Usage:
    %[1]s [globalflags] entry-inventory-service COMMAND [flags]

COMMAND:
    get-inventory: GetInventory implements getInventory.
    update-inventory: UpdateInventory implements updateInventory.

Additional help:
    %[1]s entry-inventory-service COMMAND --help
`, os.Args[0])
}
func entryInventoryServiceGetInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-inventory-service get-inventory -id STRING

GetInventory implements getInventory.
    -id STRING: UUId of the inventory

Example:
    %[1]s entry-inventory-service get-inventory --id "Amet reprehenderit ea."
`, os.Args[0])
}

func entryInventoryServiceUpdateInventoryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-inventory-service update-inventory -body JSON -id STRING

UpdateInventory implements updateInventory.
    -body JSON: 
    -id STRING: UUId of the Inventory

Example:
    %[1]s entry-inventory-service update-inventory --body '{
      "itemsId": [
         "Quibusdam nobis natus a.",
         "Tempore qui."
      ]
   }' --id "Iure quae."
`, os.Args[0])
}

// entry-item-serviceUsage displays the usage of the entry-item-service command
// and its subcommands.
func entryItemServiceUsage() {
	fmt.Fprintf(os.Stderr, `The entry item service communicates with items microservice.
Usage:
    %[1]s [globalflags] entry-item-service COMMAND [flags]

COMMAND:
    create-item: CreateItem implements createItem.
    get-items: GetItems implements getItems.
    update-item: UpdateItem implements updateItem.
    delete-item: DeleteItem implements deleteItem.

Additional help:
    %[1]s entry-item-service COMMAND --help
`, os.Args[0])
}
func entryItemServiceCreateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-item-service create-item -body JSON

CreateItem implements createItem.
    -body JSON: 

Example:
    %[1]s entry-item-service create-item --body '{
      "damage": 1446501656436104991,
      "description": "Porro excepturi quia tempore esse sapiente.",
      "healing": 8469736963636152442,
      "name": "Pariatur repellendus consequatur.",
      "protection": 7091603181480834472
   }'
`, os.Args[0])
}

func entryItemServiceGetItemsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-item-service get-items -ids JSON

GetItems implements getItems.
    -ids JSON: 

Example:
    %[1]s entry-item-service get-items --ids '[
      "id1",
      "id2",
      "id3"
   ]'
`, os.Args[0])
}

func entryItemServiceUpdateItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-item-service update-item -body JSON -id STRING

UpdateItem implements updateItem.
    -body JSON: 
    -id STRING: UUId of the item

Example:
    %[1]s entry-item-service update-item --body '{
      "damage": 7370789085788686602,
      "description": "Sapiente harum sint et quo voluptas fugit.",
      "healing": 8579359920166379124,
      "name": "Neque et.",
      "protection": 8272555717849134277
   }' --id "Est maxime."
`, os.Args[0])
}

func entryItemServiceDeleteItemUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] entry-item-service delete-item -id STRING

DeleteItem implements deleteItem.
    -id STRING: UUId of the item

Example:
    %[1]s entry-item-service delete-item --id "Et laborum quibusdam quasi quis."
`, os.Args[0])
}
