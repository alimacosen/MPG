// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryInventoryService HTTP server types
//
// Command:
// $ goa gen mpg/entry/design

package server

import (
	entryinventoryservice "mpg/entry/gen/entry_inventory_service"

	goa "goa.design/goa/v3/pkg"
)

// UpdateInventoryRequestBody is the type of the "EntryInventoryService"
// service "updateInventory" endpoint HTTP request body.
type UpdateInventoryRequestBody struct {
	// Array of uuid of items
	ItemsID []string `form:"itemsId,omitempty" json:"itemsId,omitempty" xml:"itemsId,omitempty"`
}

// GetInventoryResponseBody is the type of the "EntryInventoryService" service
// "getInventory" endpoint HTTP response body.
type GetInventoryResponseBody struct {
	// UUId of the inventory
	ID string `form:"id" json:"id" xml:"id"`
	// UUId of the character that this inventory belongs to
	UserID string `form:"userId" json:"userId" xml:"userId"`
	// Array of uuid of items
	ItemsID []string `form:"itemsId,omitempty" json:"itemsId,omitempty" xml:"itemsId,omitempty"`
}

// NewGetInventoryResponseBody builds the HTTP response body from the result of
// the "getInventory" endpoint of the "EntryInventoryService" service.
func NewGetInventoryResponseBody(res *entryinventoryservice.Inventory) *GetInventoryResponseBody {
	body := &GetInventoryResponseBody{
		ID:     res.ID,
		UserID: res.UserID,
	}
	if res.ItemsID != nil {
		body.ItemsID = make([]string, len(res.ItemsID))
		for i, val := range res.ItemsID {
			body.ItemsID[i] = val
		}
	}
	return body
}

// NewGetInventoryPayload builds a EntryInventoryService service getInventory
// endpoint payload.
func NewGetInventoryPayload(id string) *entryinventoryservice.GetInventoryPayload {
	v := &entryinventoryservice.GetInventoryPayload{}
	v.ID = id

	return v
}

// NewUpdateInventoryPayload builds a EntryInventoryService service
// updateInventory endpoint payload.
func NewUpdateInventoryPayload(body *UpdateInventoryRequestBody, id string) *entryinventoryservice.UpdateInventoryPayload {
	v := &entryinventoryservice.UpdateInventoryPayload{}
	v.ItemsID = make([]string, len(body.ItemsID))
	for i, val := range body.ItemsID {
		v.ItemsID[i] = val
	}
	v.ID = id

	return v
}

// ValidateUpdateInventoryRequestBody runs the validations defined on
// UpdateInventoryRequestBody
func ValidateUpdateInventoryRequestBody(body *UpdateInventoryRequestBody) (err error) {
	if body.ItemsID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("itemsId", "body"))
	}
	return
}
