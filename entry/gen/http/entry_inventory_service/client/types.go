// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryInventoryService HTTP client types
//
// Command:
// $ goa gen mpg/entry/design

package client

import (
	entryinventoryservice "mpg/entry/gen/entry_inventory_service"

	goa "goa.design/goa/v3/pkg"
)

// UpdateInventoryRequestBody is the type of the "EntryInventoryService"
// service "updateInventory" endpoint HTTP request body.
type UpdateInventoryRequestBody struct {
	// Array of uuid of items
	ItemsID []string `form:"itemsId" json:"itemsId" xml:"itemsId"`
}

// GetInventoryResponseBody is the type of the "EntryInventoryService" service
// "getInventory" endpoint HTTP response body.
type GetInventoryResponseBody struct {
	// UUId of the inventory
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// UUId of the character that this inventory belongs to
	UserID *string `form:"userId,omitempty" json:"userId,omitempty" xml:"userId,omitempty"`
	// Array of uuid of items
	ItemsID []string `form:"itemsId,omitempty" json:"itemsId,omitempty" xml:"itemsId,omitempty"`
}

// NewUpdateInventoryRequestBody builds the HTTP request body from the payload
// of the "updateInventory" endpoint of the "EntryInventoryService" service.
func NewUpdateInventoryRequestBody(p *entryinventoryservice.UpdateInventoryPayload) *UpdateInventoryRequestBody {
	body := &UpdateInventoryRequestBody{}
	if p.ItemsID != nil {
		body.ItemsID = make([]string, len(p.ItemsID))
		for i, val := range p.ItemsID {
			body.ItemsID[i] = val
		}
	}
	return body
}

// NewGetInventoryInventoryOK builds a "EntryInventoryService" service
// "getInventory" endpoint result from a HTTP "OK" response.
func NewGetInventoryInventoryOK(body *GetInventoryResponseBody) *entryinventoryservice.Inventory {
	v := &entryinventoryservice.Inventory{
		ID:     *body.ID,
		UserID: *body.UserID,
	}
	if body.ItemsID != nil {
		v.ItemsID = make([]string, len(body.ItemsID))
		for i, val := range body.ItemsID {
			v.ItemsID[i] = val
		}
	}

	return v
}

// NewGetInventoryGetInvalidArgs builds a EntryInventoryService service
// getInventory endpoint get_invalid_args error.
func NewGetInventoryGetInvalidArgs(body string) entryinventoryservice.GetInvalidArgs {
	v := entryinventoryservice.GetInvalidArgs(body)

	return v
}

// NewGetInventoryGetNoCriteria builds a EntryInventoryService service
// getInventory endpoint get_no_criteria error.
func NewGetInventoryGetNoCriteria(body string) entryinventoryservice.GetNoCriteria {
	v := entryinventoryservice.GetNoCriteria(body)

	return v
}

// NewGetInventoryGetNoMatch builds a EntryInventoryService service
// getInventory endpoint get_no_match error.
func NewGetInventoryGetNoMatch(body string) entryinventoryservice.GetNoMatch {
	v := entryinventoryservice.GetNoMatch(body)

	return v
}

// NewUpdateInventoryUpdateInvalidArgs builds a EntryInventoryService service
// updateInventory endpoint update_invalid_args error.
func NewUpdateInventoryUpdateInvalidArgs(body string) entryinventoryservice.UpdateInvalidArgs {
	v := entryinventoryservice.UpdateInvalidArgs(body)

	return v
}

// NewUpdateInventoryUpdateNoCriteria builds a EntryInventoryService service
// updateInventory endpoint update_no_criteria error.
func NewUpdateInventoryUpdateNoCriteria(body string) entryinventoryservice.UpdateNoCriteria {
	v := entryinventoryservice.UpdateNoCriteria(body)

	return v
}

// NewUpdateInventoryUpdateNoMatch builds a EntryInventoryService service
// updateInventory endpoint update_no_match error.
func NewUpdateInventoryUpdateNoMatch(body string) entryinventoryservice.UpdateNoMatch {
	v := entryinventoryservice.UpdateNoMatch(body)

	return v
}

// ValidateGetInventoryResponseBody runs the validations defined on
// GetInventoryResponseBody
func ValidateGetInventoryResponseBody(body *GetInventoryResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("userId", "body"))
	}
	return
}
