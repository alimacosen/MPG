// Code generated by goa v3.11.3, DO NOT EDIT.
//
// EntryInventoryService endpoints
//
// Command:
// $ goa gen mpg/entry/design

package entryinventoryservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "EntryInventoryService" service endpoints.
type Endpoints struct {
	GetInventory    goa.Endpoint
	UpdateInventory goa.Endpoint
}

// NewEndpoints wraps the methods of the "EntryInventoryService" service with
// endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetInventory:    NewGetInventoryEndpoint(s),
		UpdateInventory: NewUpdateInventoryEndpoint(s),
	}
}

// Use applies the given middleware to all the "EntryInventoryService" service
// endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetInventory = m(e.GetInventory)
	e.UpdateInventory = m(e.UpdateInventory)
}

// NewGetInventoryEndpoint returns an endpoint function that calls the method
// "getInventory" of service "EntryInventoryService".
func NewGetInventoryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetInventoryPayload)
		return s.GetInventory(ctx, p)
	}
}

// NewUpdateInventoryEndpoint returns an endpoint function that calls the
// method "updateInventory" of service "EntryInventoryService".
func NewUpdateInventoryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateInventoryPayload)
		return s.UpdateInventory(ctx, p)
	}
}
