// Code generated by goa v3.11.3, DO NOT EDIT.
//
// InventoryService service
//
// Command:
// $ goa gen mpg/inventories/design

package inventoryservice

import (
	"context"
)

// The inventory service performs CRUD operations for inventories
type Service interface {
	// CreateInventory implements createInventory.
	CreateInventory(context.Context, *CreateInventoryPayload) (res *Inventory, err error)
	// GetInventory implements getInventory.
	GetInventory(context.Context, *GetInventoryPayload) (res *Inventory, err error)
	// UpdateInventory implements updateInventory.
	UpdateInventory(context.Context, *UpdateInventoryPayload) (res int, err error)
	// DeleteInventory implements deleteInventory.
	DeleteInventory(context.Context, *DeleteInventoryPayload) (res int, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "InventoryService"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [4]string{"createInventory", "getInventory", "updateInventory", "deleteInventory"}

// CreateInventoryPayload is the payload type of the InventoryService service
// createInventory method.
type CreateInventoryPayload struct {
	// UUId of the character that this inventory belongs to
	UserID string
}

// DeleteInventoryPayload is the payload type of the InventoryService service
// deleteInventory method.
type DeleteInventoryPayload struct {
	// UUId of the Inventory
	ID string
}

// GetInventoryPayload is the payload type of the InventoryService service
// getInventory method.
type GetInventoryPayload struct {
	// UUId of the inventory
	ID string
}

// Inventory is the result type of the InventoryService service createInventory
// method.
type Inventory struct {
	// UUId of the inventory
	ID string
	// UUId of the character that this inventory belongs to
	UserID string
	// Array of uuid of items
	ItemsID []string
}

// UpdateInventoryPayload is the payload type of the InventoryService service
// updateInventory method.
type UpdateInventoryPayload struct {
	// UUId of the Inventory
	ID string
	// Array of uuid of items
	ItemsID []string
}

// Invalid arguments. Required: userId
type CreateInvalidArgs string

// Invalid arguments. Required: id
type DeleteInvalidArgs string

// No inventory matched given criteria
type DeleteNoMatch string

// Invalid arguments. Required: id
type GetInvalidArgs string

// No inventory matched given criteria
type GetNoMatch string

// Invalid arguments. Required: id, itemsId
type UpdateInvalidArgs string

// No inventory matched given criteria
type UpdateNoMatch string

// Error returns an error description.
func (e CreateInvalidArgs) Error() string {
	return "Invalid arguments. Required: userId "
}

// ErrorName returns "create_invalid_args".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e CreateInvalidArgs) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "create_invalid_args".
func (e CreateInvalidArgs) GoaErrorName() string {
	return "create_invalid_args"
}

// Error returns an error description.
func (e DeleteInvalidArgs) Error() string {
	return "Invalid arguments. Required: id "
}

// ErrorName returns "delete_invalid_args".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e DeleteInvalidArgs) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "delete_invalid_args".
func (e DeleteInvalidArgs) GoaErrorName() string {
	return "delete_invalid_args"
}

// Error returns an error description.
func (e DeleteNoMatch) Error() string {
	return "No inventory matched given criteria"
}

// ErrorName returns "delete_no_match".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e DeleteNoMatch) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "delete_no_match".
func (e DeleteNoMatch) GoaErrorName() string {
	return "delete_no_match"
}

// Error returns an error description.
func (e GetInvalidArgs) Error() string {
	return "Invalid arguments. Required: id "
}

// ErrorName returns "get_invalid_args".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e GetInvalidArgs) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "get_invalid_args".
func (e GetInvalidArgs) GoaErrorName() string {
	return "get_invalid_args"
}

// Error returns an error description.
func (e GetNoMatch) Error() string {
	return "No inventory matched given criteria"
}

// ErrorName returns "get_no_match".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e GetNoMatch) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "get_no_match".
func (e GetNoMatch) GoaErrorName() string {
	return "get_no_match"
}

// Error returns an error description.
func (e UpdateInvalidArgs) Error() string {
	return "Invalid arguments. Required: id, itemsId "
}

// ErrorName returns "update_invalid_args".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UpdateInvalidArgs) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "update_invalid_args".
func (e UpdateInvalidArgs) GoaErrorName() string {
	return "update_invalid_args"
}

// Error returns an error description.
func (e UpdateNoMatch) Error() string {
	return "No inventory matched given criteria"
}

// ErrorName returns "update_no_match".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e UpdateNoMatch) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "update_no_match".
func (e UpdateNoMatch) GoaErrorName() string {
	return "update_no_match"
}
