// Code generated by goa v3.11.3, DO NOT EDIT.
//
// InventoryService gRPC server encoders and decoders
//
// Command:
// $ goa gen inventories/design

package server

import (
	"context"
	inventory_servicepb "inventories/gen/grpc/inventory_service/pb"
	inventoryservice "inventories/gen/inventory_service"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateInventoryResponse encodes responses from the "InventoryService"
// service "createInventory" endpoint.
func EncodeCreateInventoryResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*inventoryservice.Inventory)
	if !ok {
		return nil, goagrpc.ErrInvalidType("InventoryService", "createInventory", "*inventoryservice.Inventory", v)
	}
	resp := NewProtoCreateInventoryResponse(result)
	return resp, nil
}

// DecodeCreateInventoryRequest decodes requests sent to "InventoryService"
// service "createInventory" endpoint.
func DecodeCreateInventoryRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *inventory_servicepb.CreateInventoryRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventory_servicepb.CreateInventoryRequest); !ok {
			return nil, goagrpc.ErrInvalidType("InventoryService", "createInventory", "*inventory_servicepb.CreateInventoryRequest", v)
		}
	}
	var payload *inventoryservice.CreateInventoryPayload
	{
		payload = NewCreateInventoryPayload(message)
	}
	return payload, nil
}

// EncodeGetInventoryResponse encodes responses from the "InventoryService"
// service "getInventory" endpoint.
func EncodeGetInventoryResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*inventoryservice.Inventory)
	if !ok {
		return nil, goagrpc.ErrInvalidType("InventoryService", "getInventory", "*inventoryservice.Inventory", v)
	}
	resp := NewProtoGetInventoryResponse(result)
	return resp, nil
}

// DecodeGetInventoryRequest decodes requests sent to "InventoryService"
// service "getInventory" endpoint.
func DecodeGetInventoryRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *inventory_servicepb.GetInventoryRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventory_servicepb.GetInventoryRequest); !ok {
			return nil, goagrpc.ErrInvalidType("InventoryService", "getInventory", "*inventory_servicepb.GetInventoryRequest", v)
		}
	}
	var payload *inventoryservice.GetInventoryPayload
	{
		payload = NewGetInventoryPayload(message)
	}
	return payload, nil
}

// EncodeUpdateInventoryResponse encodes responses from the "InventoryService"
// service "updateInventory" endpoint.
func EncodeUpdateInventoryResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("InventoryService", "updateInventory", "int", v)
	}
	resp := NewProtoUpdateInventoryResponse(result)
	return resp, nil
}

// DecodeUpdateInventoryRequest decodes requests sent to "InventoryService"
// service "updateInventory" endpoint.
func DecodeUpdateInventoryRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *inventory_servicepb.UpdateInventoryRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventory_servicepb.UpdateInventoryRequest); !ok {
			return nil, goagrpc.ErrInvalidType("InventoryService", "updateInventory", "*inventory_servicepb.UpdateInventoryRequest", v)
		}
		if err := ValidateUpdateInventoryRequest(message); err != nil {
			return nil, err
		}
	}
	var payload *inventoryservice.UpdateInventoryPayload
	{
		payload = NewUpdateInventoryPayload(message)
	}
	return payload, nil
}

// EncodeDeleteInventoryResponse encodes responses from the "InventoryService"
// service "deleteInventory" endpoint.
func EncodeDeleteInventoryResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("InventoryService", "deleteInventory", "int", v)
	}
	resp := NewProtoDeleteInventoryResponse(result)
	return resp, nil
}

// DecodeDeleteInventoryRequest decodes requests sent to "InventoryService"
// service "deleteInventory" endpoint.
func DecodeDeleteInventoryRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *inventory_servicepb.DeleteInventoryRequest
		ok      bool
	)
	{
		if message, ok = v.(*inventory_servicepb.DeleteInventoryRequest); !ok {
			return nil, goagrpc.ErrInvalidType("InventoryService", "deleteInventory", "*inventory_servicepb.DeleteInventoryRequest", v)
		}
	}
	var payload *inventoryservice.DeleteInventoryPayload
	{
		payload = NewDeleteInventoryPayload(message)
	}
	return payload, nil
}
