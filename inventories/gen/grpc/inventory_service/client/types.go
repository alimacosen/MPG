// Code generated by goa v3.11.3, DO NOT EDIT.
//
// InventoryService gRPC client types
//
// Command:
// $ goa gen mpg/inventories/design

package client

import (
	inventory_servicepb "mpg/inventories/gen/grpc/inventory_service/pb"
	inventoryservice "mpg/inventories/gen/inventory_service"
)

// NewProtoCreateInventoryRequest builds the gRPC request type from the payload
// of the "createInventory" endpoint of the "InventoryService" service.
func NewProtoCreateInventoryRequest(payload *inventoryservice.CreateInventoryPayload) *inventory_servicepb.CreateInventoryRequest {
	message := &inventory_servicepb.CreateInventoryRequest{
		UserId: payload.UserID,
	}
	return message
}

// NewCreateInventoryResult builds the result type of the "createInventory"
// endpoint of the "InventoryService" service from the gRPC response type.
func NewCreateInventoryResult(message *inventory_servicepb.CreateInventoryResponse) *inventoryservice.Inventory {
	result := &inventoryservice.Inventory{
		ID:     message.Id,
		UserID: message.UserId,
	}
	if message.ItemsId != nil {
		result.ItemsID = make([]string, len(message.ItemsId))
		for i, val := range message.ItemsId {
			result.ItemsID[i] = val
		}
	}
	return result
}

// NewProtoGetInventoryRequest builds the gRPC request type from the payload of
// the "getInventory" endpoint of the "InventoryService" service.
func NewProtoGetInventoryRequest(payload *inventoryservice.GetInventoryPayload) *inventory_servicepb.GetInventoryRequest {
	message := &inventory_servicepb.GetInventoryRequest{
		Id: payload.ID,
	}
	return message
}

// NewGetInventoryResult builds the result type of the "getInventory" endpoint
// of the "InventoryService" service from the gRPC response type.
func NewGetInventoryResult(message *inventory_servicepb.GetInventoryResponse) *inventoryservice.Inventory {
	result := &inventoryservice.Inventory{
		ID:     message.Id,
		UserID: message.UserId,
	}
	if message.ItemsId != nil {
		result.ItemsID = make([]string, len(message.ItemsId))
		for i, val := range message.ItemsId {
			result.ItemsID[i] = val
		}
	}
	return result
}

// NewProtoUpdateInventoryRequest builds the gRPC request type from the payload
// of the "updateInventory" endpoint of the "InventoryService" service.
func NewProtoUpdateInventoryRequest(payload *inventoryservice.UpdateInventoryPayload) *inventory_servicepb.UpdateInventoryRequest {
	message := &inventory_servicepb.UpdateInventoryRequest{
		Id: payload.ID,
	}
	if payload.ItemsID != nil {
		message.ItemsId = make([]string, len(payload.ItemsID))
		for i, val := range payload.ItemsID {
			message.ItemsId[i] = val
		}
	}
	return message
}

// NewUpdateInventoryResult builds the result type of the "updateInventory"
// endpoint of the "InventoryService" service from the gRPC response type.
func NewUpdateInventoryResult(message *inventory_servicepb.UpdateInventoryResponse) int {
	result := int(message.Field)
	return result
}

// NewProtoDeleteInventoryRequest builds the gRPC request type from the payload
// of the "deleteInventory" endpoint of the "InventoryService" service.
func NewProtoDeleteInventoryRequest(payload *inventoryservice.DeleteInventoryPayload) *inventory_servicepb.DeleteInventoryRequest {
	message := &inventory_servicepb.DeleteInventoryRequest{
		Id: payload.ID,
	}
	return message
}

// NewDeleteInventoryResult builds the result type of the "deleteInventory"
// endpoint of the "InventoryService" service from the gRPC response type.
func NewDeleteInventoryResult(message *inventory_servicepb.DeleteInventoryResponse) int {
	result := int(message.Field)
	return result
}
