// Code generated by goa v3.11.3, DO NOT EDIT.
//
// InventoryService gRPC client CLI support package
//
// Command:
// $ goa gen inventories/design

package client

import (
	"encoding/json"
	"fmt"
	inventory_servicepb "inventories/gen/grpc/inventory_service/pb"
	inventoryservice "inventories/gen/inventory_service"
)

// BuildCreateInventoryPayload builds the payload for the InventoryService
// createInventory endpoint from CLI flags.
func BuildCreateInventoryPayload(inventoryServiceCreateInventoryMessage string) (*inventoryservice.CreateInventoryPayload, error) {
	var err error
	var message inventory_servicepb.CreateInventoryRequest
	{
		if inventoryServiceCreateInventoryMessage != "" {
			err = json.Unmarshal([]byte(inventoryServiceCreateInventoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"userId\": \"Est in ab ut aut.\"\n   }'")
			}
		}
	}
	v := &inventoryservice.CreateInventoryPayload{
		UserID: message.UserId,
	}

	return v, nil
}

// BuildGetInventoryPayload builds the payload for the InventoryService
// getInventory endpoint from CLI flags.
func BuildGetInventoryPayload(inventoryServiceGetInventoryMessage string) (*inventoryservice.GetInventoryPayload, error) {
	var err error
	var message inventory_servicepb.GetInventoryRequest
	{
		if inventoryServiceGetInventoryMessage != "" {
			err = json.Unmarshal([]byte(inventoryServiceGetInventoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Aut eveniet quo.\"\n   }'")
			}
		}
	}
	v := &inventoryservice.GetInventoryPayload{
		ID: message.Id,
	}

	return v, nil
}

// BuildUpdateInventoryPayload builds the payload for the InventoryService
// updateInventory endpoint from CLI flags.
func BuildUpdateInventoryPayload(inventoryServiceUpdateInventoryMessage string) (*inventoryservice.UpdateInventoryPayload, error) {
	var err error
	var message inventory_servicepb.UpdateInventoryRequest
	{
		if inventoryServiceUpdateInventoryMessage != "" {
			err = json.Unmarshal([]byte(inventoryServiceUpdateInventoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Mollitia quis sint omnis similique at sint.\",\n      \"itemsId\": [\n         \"Debitis sit sit veritatis omnis.\",\n         \"Suscipit sunt minus voluptate corporis enim.\"\n      ]\n   }'")
			}
		}
	}
	v := &inventoryservice.UpdateInventoryPayload{
		ID: message.Id,
	}
	if message.ItemsId != nil {
		v.ItemsID = make([]string, len(message.ItemsId))
		for i, val := range message.ItemsId {
			v.ItemsID[i] = val
		}
	}

	return v, nil
}

// BuildDeleteInventoryPayload builds the payload for the InventoryService
// deleteInventory endpoint from CLI flags.
func BuildDeleteInventoryPayload(inventoryServiceDeleteInventoryMessage string) (*inventoryservice.DeleteInventoryPayload, error) {
	var err error
	var message inventory_servicepb.DeleteInventoryRequest
	{
		if inventoryServiceDeleteInventoryMessage != "" {
			err = json.Unmarshal([]byte(inventoryServiceDeleteInventoryMessage), &message)
			if err != nil {
				return nil, fmt.Errorf("invalid JSON for message, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"Laboriosam hic aliquid excepturi.\"\n   }'")
			}
		}
	}
	v := &inventoryservice.DeleteInventoryPayload{
		ID: message.Id,
	}

	return v, nil
}
