// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ItemService endpoints
//
// Command:
// $ goa gen mpg/items/design

package itemservice

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "ItemService" service endpoints.
type Endpoints struct {
	CreateItem goa.Endpoint
	GetItem    goa.Endpoint
	UpdateItem goa.Endpoint
	DeleteItem goa.Endpoint
}

// NewEndpoints wraps the methods of the "ItemService" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		CreateItem: NewCreateItemEndpoint(s),
		GetItem:    NewGetItemEndpoint(s),
		UpdateItem: NewUpdateItemEndpoint(s),
		DeleteItem: NewDeleteItemEndpoint(s),
	}
}

// Use applies the given middleware to all the "ItemService" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.CreateItem = m(e.CreateItem)
	e.GetItem = m(e.GetItem)
	e.UpdateItem = m(e.UpdateItem)
	e.DeleteItem = m(e.DeleteItem)
}

// NewCreateItemEndpoint returns an endpoint function that calls the method
// "createItem" of service "ItemService".
func NewCreateItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateItemPayload)
		return s.CreateItem(ctx, p)
	}
}

// NewGetItemEndpoint returns an endpoint function that calls the method
// "getItem" of service "ItemService".
func NewGetItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetItemPayload)
		return s.GetItem(ctx, p)
	}
}

// NewUpdateItemEndpoint returns an endpoint function that calls the method
// "updateItem" of service "ItemService".
func NewUpdateItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*UpdateItemPayload)
		return s.UpdateItem(ctx, p)
	}
}

// NewDeleteItemEndpoint returns an endpoint function that calls the method
// "deleteItem" of service "ItemService".
func NewDeleteItemEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteItemPayload)
		return s.DeleteItem(ctx, p)
	}
}
