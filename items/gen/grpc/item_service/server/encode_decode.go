// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ItemService gRPC server encoders and decoders
//
// Command:
// $ goa gen mpg/items/design

package server

import (
	"context"
	item_servicepb "mpg/items/gen/grpc/item_service/pb"
	itemservice "mpg/items/gen/item_service"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc/metadata"
)

// EncodeCreateItemResponse encodes responses from the "ItemService" service
// "createItem" endpoint.
func EncodeCreateItemResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(*itemservice.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "createItem", "*itemservice.Item", v)
	}
	resp := NewProtoCreateItemResponse(result)
	return resp, nil
}

// DecodeCreateItemRequest decodes requests sent to "ItemService" service
// "createItem" endpoint.
func DecodeCreateItemRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.CreateItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.CreateItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "createItem", "*item_servicepb.CreateItemRequest", v)
		}
	}
	var payload *itemservice.CreateItemPayload
	{
		payload = NewCreateItemPayload(message)
	}
	return payload, nil
}

// EncodeGetItemsResponse encodes responses from the "ItemService" service
// "getItems" endpoint.
func EncodeGetItemsResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.([]*itemservice.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "getItems", "[]*itemservice.Item", v)
	}
	resp := NewProtoGetItemsResponse(result)
	return resp, nil
}

// DecodeGetItemsRequest decodes requests sent to "ItemService" service
// "getItems" endpoint.
func DecodeGetItemsRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.GetItemsRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.GetItemsRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "getItems", "*item_servicepb.GetItemsRequest", v)
		}
	}
	var payload *itemservice.GetItemsPayload
	{
		payload = NewGetItemsPayload(message)
	}
	return payload, nil
}

// EncodeGetAllItemsResponse encodes responses from the "ItemService" service
// "getAllItems" endpoint.
func EncodeGetAllItemsResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.([]*itemservice.Item)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "getAllItems", "[]*itemservice.Item", v)
	}
	resp := NewProtoGetAllItemsResponse(result)
	return resp, nil
}

// EncodeUpdateItemResponse encodes responses from the "ItemService" service
// "updateItem" endpoint.
func EncodeUpdateItemResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "updateItem", "int", v)
	}
	resp := NewProtoUpdateItemResponse(result)
	return resp, nil
}

// DecodeUpdateItemRequest decodes requests sent to "ItemService" service
// "updateItem" endpoint.
func DecodeUpdateItemRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.UpdateItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.UpdateItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "updateItem", "*item_servicepb.UpdateItemRequest", v)
		}
	}
	var payload *itemservice.UpdateItemPayload
	{
		payload = NewUpdateItemPayload(message)
	}
	return payload, nil
}

// EncodeDeleteItemResponse encodes responses from the "ItemService" service
// "deleteItem" endpoint.
func EncodeDeleteItemResponse(ctx context.Context, v any, hdr, trlr *metadata.MD) (any, error) {
	result, ok := v.(int)
	if !ok {
		return nil, goagrpc.ErrInvalidType("ItemService", "deleteItem", "int", v)
	}
	resp := NewProtoDeleteItemResponse(result)
	return resp, nil
}

// DecodeDeleteItemRequest decodes requests sent to "ItemService" service
// "deleteItem" endpoint.
func DecodeDeleteItemRequest(ctx context.Context, v any, md metadata.MD) (any, error) {
	var (
		message *item_servicepb.DeleteItemRequest
		ok      bool
	)
	{
		if message, ok = v.(*item_servicepb.DeleteItemRequest); !ok {
			return nil, goagrpc.ErrInvalidType("ItemService", "deleteItem", "*item_servicepb.DeleteItemRequest", v)
		}
	}
	var payload *itemservice.DeleteItemPayload
	{
		payload = NewDeleteItemPayload(message)
	}
	return payload, nil
}
