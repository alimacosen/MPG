// Code generated by goa v3.11.3, DO NOT EDIT.
//
// ItemService gRPC server
//
// Command:
// $ goa gen mpg/items/design

package server

import (
	"context"
	"errors"
	item_servicepb "mpg/items/gen/grpc/item_service/pb"
	itemservice "mpg/items/gen/item_service"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the item_servicepb.ItemServiceServer interface.
type Server struct {
	CreateItemH  goagrpc.UnaryHandler
	GetItemsH    goagrpc.UnaryHandler
	GetAllItemsH goagrpc.UnaryHandler
	UpdateItemH  goagrpc.UnaryHandler
	DeleteItemH  goagrpc.UnaryHandler
	item_servicepb.UnimplementedItemServiceServer
}

// New instantiates the server struct with the ItemService service endpoints.
func New(e *itemservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CreateItemH:  NewCreateItemHandler(e.CreateItem, uh),
		GetItemsH:    NewGetItemsHandler(e.GetItems, uh),
		GetAllItemsH: NewGetAllItemsHandler(e.GetAllItems, uh),
		UpdateItemH:  NewUpdateItemHandler(e.UpdateItem, uh),
		DeleteItemH:  NewDeleteItemHandler(e.DeleteItem, uh),
	}
}

// NewCreateItemHandler creates a gRPC handler which serves the "ItemService"
// service "createItem" endpoint.
func NewCreateItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateItemRequest, EncodeCreateItemResponse)
	}
	return h
}

// CreateItem implements the "CreateItem" method in
// item_servicepb.ItemServiceServer interface.
func (s *Server) CreateItem(ctx context.Context, message *item_servicepb.CreateItemRequest) (*item_servicepb.CreateItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "createItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ItemService")
	resp, err := s.CreateItemH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "create_invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*item_servicepb.CreateItemResponse), nil
}

// NewGetItemsHandler creates a gRPC handler which serves the "ItemService"
// service "getItems" endpoint.
func NewGetItemsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetItemsRequest, EncodeGetItemsResponse)
	}
	return h
}

// GetItems implements the "GetItems" method in
// item_servicepb.ItemServiceServer interface.
func (s *Server) GetItems(ctx context.Context, message *item_servicepb.GetItemsRequest) (*item_servicepb.GetItemsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getItems")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ItemService")
	resp, err := s.GetItemsH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "get_invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "get_no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*item_servicepb.GetItemsResponse), nil
}

// NewGetAllItemsHandler creates a gRPC handler which serves the "ItemService"
// service "getAllItems" endpoint.
func NewGetAllItemsHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, nil, EncodeGetAllItemsResponse)
	}
	return h
}

// GetAllItems implements the "GetAllItems" method in
// item_servicepb.ItemServiceServer interface.
func (s *Server) GetAllItems(ctx context.Context, message *item_servicepb.GetAllItemsRequest) (*item_servicepb.GetAllItemsResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getAllItems")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ItemService")
	resp, err := s.GetAllItemsH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "get_invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "get_no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*item_servicepb.GetAllItemsResponse), nil
}

// NewUpdateItemHandler creates a gRPC handler which serves the "ItemService"
// service "updateItem" endpoint.
func NewUpdateItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateItemRequest, EncodeUpdateItemResponse)
	}
	return h
}

// UpdateItem implements the "UpdateItem" method in
// item_servicepb.ItemServiceServer interface.
func (s *Server) UpdateItem(ctx context.Context, message *item_servicepb.UpdateItemRequest) (*item_servicepb.UpdateItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "updateItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ItemService")
	resp, err := s.UpdateItemH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "update_invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "update_no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*item_servicepb.UpdateItemResponse), nil
}

// NewDeleteItemHandler creates a gRPC handler which serves the "ItemService"
// service "deleteItem" endpoint.
func NewDeleteItemHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteItemRequest, EncodeDeleteItemResponse)
	}
	return h
}

// DeleteItem implements the "DeleteItem" method in
// item_servicepb.ItemServiceServer interface.
func (s *Server) DeleteItem(ctx context.Context, message *item_servicepb.DeleteItemRequest) (*item_servicepb.DeleteItemResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "deleteItem")
	ctx = context.WithValue(ctx, goa.ServiceKey, "ItemService")
	resp, err := s.DeleteItemH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "delete_invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "delete_no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*item_servicepb.DeleteItemResponse), nil
}
