// Code generated by goa v3.11.3, DO NOT EDIT.
//
// charactersServer gRPC client CLI support package
//
// Command:
// $ goa gen characters/design

package cli

import (
	characterservicec "characters/gen/grpc/character_service/client"
	"flag"
	"fmt"
	"os"

	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `character-service (create-character|get-character|update-character-attributes|delete-character)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` character-service create-character --message '{
      "description": "Quidem ea autem error ullam ducimus.",
      "name": "Ut aut suscipit consequatur voluptas ut porro."
   }'` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, any, error) {
	var (
		characterServiceFlags = flag.NewFlagSet("character-service", flag.ContinueOnError)

		characterServiceCreateCharacterFlags       = flag.NewFlagSet("create-character", flag.ExitOnError)
		characterServiceCreateCharacterMessageFlag = characterServiceCreateCharacterFlags.String("message", "", "")

		characterServiceGetCharacterFlags       = flag.NewFlagSet("get-character", flag.ExitOnError)
		characterServiceGetCharacterMessageFlag = characterServiceGetCharacterFlags.String("message", "", "")

		characterServiceUpdateCharacterAttributesFlags       = flag.NewFlagSet("update-character-attributes", flag.ExitOnError)
		characterServiceUpdateCharacterAttributesMessageFlag = characterServiceUpdateCharacterAttributesFlags.String("message", "", "")

		characterServiceDeleteCharacterFlags       = flag.NewFlagSet("delete-character", flag.ExitOnError)
		characterServiceDeleteCharacterMessageFlag = characterServiceDeleteCharacterFlags.String("message", "", "")
	)
	characterServiceFlags.Usage = characterServiceUsage
	characterServiceCreateCharacterFlags.Usage = characterServiceCreateCharacterUsage
	characterServiceGetCharacterFlags.Usage = characterServiceGetCharacterUsage
	characterServiceUpdateCharacterAttributesFlags.Usage = characterServiceUpdateCharacterAttributesUsage
	characterServiceDeleteCharacterFlags.Usage = characterServiceDeleteCharacterUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "character-service":
			svcf = characterServiceFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "character-service":
			switch epn {
			case "create-character":
				epf = characterServiceCreateCharacterFlags

			case "get-character":
				epf = characterServiceGetCharacterFlags

			case "update-character-attributes":
				epf = characterServiceUpdateCharacterAttributesFlags

			case "delete-character":
				epf = characterServiceDeleteCharacterFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "character-service":
			c := characterservicec.NewClient(cc, opts...)
			switch epn {
			case "create-character":
				endpoint = c.CreateCharacter()
				data, err = characterservicec.BuildCreateCharacterPayload(*characterServiceCreateCharacterMessageFlag)
			case "get-character":
				endpoint = c.GetCharacter()
				data, err = characterservicec.BuildGetCharacterPayload(*characterServiceGetCharacterMessageFlag)
			case "update-character-attributes":
				endpoint = c.UpdateCharacterAttributes()
				data, err = characterservicec.BuildUpdateCharacterAttributesPayload(*characterServiceUpdateCharacterAttributesMessageFlag)
			case "delete-character":
				endpoint = c.DeleteCharacter()
				data, err = characterservicec.BuildDeleteCharacterPayload(*characterServiceDeleteCharacterMessageFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// character-serviceUsage displays the usage of the character-service command
// and its subcommands.
func characterServiceUsage() {
	fmt.Fprintf(os.Stderr, `The character service performs CRUD operations for characters and their attributes.
Usage:
    %[1]s [globalflags] character-service COMMAND [flags]

COMMAND:
    create-character: CreateCharacter implements createCharacter.
    get-character: GetCharacter implements getCharacter.
    update-character-attributes: UpdateCharacterAttributes implements updateCharacterAttributes.
    delete-character: DeleteCharacter implements deleteCharacter.

Additional help:
    %[1]s character-service COMMAND --help
`, os.Args[0])
}
func characterServiceCreateCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character-service create-character -message JSON

CreateCharacter implements createCharacter.
    -message JSON: 

Example:
    %[1]s character-service create-character --message '{
      "description": "Quidem ea autem error ullam ducimus.",
      "name": "Ut aut suscipit consequatur voluptas ut porro."
   }'
`, os.Args[0])
}

func characterServiceGetCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character-service get-character -message JSON

GetCharacter implements getCharacter.
    -message JSON: 

Example:
    %[1]s character-service get-character --message '{
      "id": "Inventore aliquid libero dignissimos dolorem."
   }'
`, os.Args[0])
}

func characterServiceUpdateCharacterAttributesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character-service update-character-attributes -message JSON

UpdateCharacterAttributes implements updateCharacterAttributes.
    -message JSON: 

Example:
    %[1]s character-service update-character-attributes --message '{
      "description": "Eos commodi.",
      "experience": 7265195379936315137,
      "health": 6332591012168433997,
      "id": "Fuga non perspiciatis maiores ut laborum.",
      "name": "Odio nostrum."
   }'
`, os.Args[0])
}

func characterServiceDeleteCharacterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] character-service delete-character -message JSON

DeleteCharacter implements deleteCharacter.
    -message JSON: 

Example:
    %[1]s character-service delete-character --message '{
      "id": "Omnis et tenetur molestias sapiente eum eos."
   }'
`, os.Args[0])
}
