// Code generated by goa v3.11.3, DO NOT EDIT.
//
// CharacterService gRPC server
//
// Command:
// $ goa gen characters/design

package server

import (
	characterservice "characters/gen/character_service"
	character_servicepb "characters/gen/grpc/character_service/pb"
	"context"
	"errors"

	goagrpc "goa.design/goa/v3/grpc"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc/codes"
)

// Server implements the character_servicepb.CharacterServiceServer interface.
type Server struct {
	CreateCharacterH           goagrpc.UnaryHandler
	GetCharacterH              goagrpc.UnaryHandler
	UpdateCharacterAttributesH goagrpc.UnaryHandler
	DeleteCharacterH           goagrpc.UnaryHandler
	character_servicepb.UnimplementedCharacterServiceServer
}

// New instantiates the server struct with the CharacterService service
// endpoints.
func New(e *characterservice.Endpoints, uh goagrpc.UnaryHandler) *Server {
	return &Server{
		CreateCharacterH:           NewCreateCharacterHandler(e.CreateCharacter, uh),
		GetCharacterH:              NewGetCharacterHandler(e.GetCharacter, uh),
		UpdateCharacterAttributesH: NewUpdateCharacterAttributesHandler(e.UpdateCharacterAttributes, uh),
		DeleteCharacterH:           NewDeleteCharacterHandler(e.DeleteCharacter, uh),
	}
}

// NewCreateCharacterHandler creates a gRPC handler which serves the
// "CharacterService" service "createCharacter" endpoint.
func NewCreateCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeCreateCharacterRequest, EncodeCreateCharacterResponse)
	}
	return h
}

// CreateCharacter implements the "CreateCharacter" method in
// character_servicepb.CharacterServiceServer interface.
func (s *Server) CreateCharacter(ctx context.Context, message *character_servicepb.CreateCharacterRequest) (*character_servicepb.CreateCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "createCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "CharacterService")
	resp, err := s.CreateCharacterH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*character_servicepb.CreateCharacterResponse), nil
}

// NewGetCharacterHandler creates a gRPC handler which serves the
// "CharacterService" service "getCharacter" endpoint.
func NewGetCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeGetCharacterRequest, EncodeGetCharacterResponse)
	}
	return h
}

// GetCharacter implements the "GetCharacter" method in
// character_servicepb.CharacterServiceServer interface.
func (s *Server) GetCharacter(ctx context.Context, message *character_servicepb.GetCharacterRequest) (*character_servicepb.GetCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "getCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "CharacterService")
	resp, err := s.GetCharacterH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*character_servicepb.GetCharacterResponse), nil
}

// NewUpdateCharacterAttributesHandler creates a gRPC handler which serves the
// "CharacterService" service "updateCharacterAttributes" endpoint.
func NewUpdateCharacterAttributesHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeUpdateCharacterAttributesRequest, EncodeUpdateCharacterAttributesResponse)
	}
	return h
}

// UpdateCharacterAttributes implements the "UpdateCharacterAttributes" method
// in character_servicepb.CharacterServiceServer interface.
func (s *Server) UpdateCharacterAttributes(ctx context.Context, message *character_servicepb.UpdateCharacterAttributesRequest) (*character_servicepb.UpdateCharacterAttributesResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "updateCharacterAttributes")
	ctx = context.WithValue(ctx, goa.ServiceKey, "CharacterService")
	resp, err := s.UpdateCharacterAttributesH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*character_servicepb.UpdateCharacterAttributesResponse), nil
}

// NewDeleteCharacterHandler creates a gRPC handler which serves the
// "CharacterService" service "deleteCharacter" endpoint.
func NewDeleteCharacterHandler(endpoint goa.Endpoint, h goagrpc.UnaryHandler) goagrpc.UnaryHandler {
	if h == nil {
		h = goagrpc.NewUnaryHandler(endpoint, DecodeDeleteCharacterRequest, EncodeDeleteCharacterResponse)
	}
	return h
}

// DeleteCharacter implements the "DeleteCharacter" method in
// character_servicepb.CharacterServiceServer interface.
func (s *Server) DeleteCharacter(ctx context.Context, message *character_servicepb.DeleteCharacterRequest) (*character_servicepb.DeleteCharacterResponse, error) {
	ctx = context.WithValue(ctx, goa.MethodKey, "deleteCharacter")
	ctx = context.WithValue(ctx, goa.ServiceKey, "CharacterService")
	resp, err := s.DeleteCharacterH.Handle(ctx, message)
	if err != nil {
		var en goa.GoaErrorNamer
		if errors.As(err, &en) {
			switch en.GoaErrorName() {
			case "invalid_args":
				return nil, goagrpc.NewStatusError(codes.InvalidArgument, err, goagrpc.NewErrorResponse(err))
			case "no_match":
				return nil, goagrpc.NewStatusError(codes.NotFound, err, goagrpc.NewErrorResponse(err))
			}
		}
		return nil, goagrpc.EncodeError(err)
	}
	return resp.(*character_servicepb.DeleteCharacterResponse), nil
}
