// Code generated by goa v3.11.3, DO NOT EDIT.
//
// CharacterService gRPC client
//
// Command:
// $ goa gen characters/design

package client

import (
	character_servicepb "characters/gen/grpc/character_service/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	goapb "goa.design/goa/v3/grpc/pb"
	goa "goa.design/goa/v3/pkg"
	"google.golang.org/grpc"
)

// Client lists the service endpoint gRPC clients.
type Client struct {
	grpccli character_servicepb.CharacterServiceClient
	opts    []grpc.CallOption
}

// NewClient instantiates gRPC client for all the CharacterService service
// servers.
func NewClient(cc *grpc.ClientConn, opts ...grpc.CallOption) *Client {
	return &Client{
		grpccli: character_servicepb.NewCharacterServiceClient(cc),
		opts:    opts,
	}
}

// CreateCharacter calls the "CreateCharacter" function in
// character_servicepb.CharacterServiceClient interface.
func (c *Client) CreateCharacter() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildCreateCharacterFunc(c.grpccli, c.opts...),
			EncodeCreateCharacterRequest,
			DecodeCreateCharacterResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// GetCharacter calls the "GetCharacter" function in
// character_servicepb.CharacterServiceClient interface.
func (c *Client) GetCharacter() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildGetCharacterFunc(c.grpccli, c.opts...),
			EncodeGetCharacterRequest,
			DecodeGetCharacterResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// UpdateCharacter calls the "UpdateCharacter" function in
// character_servicepb.CharacterServiceClient interface.
func (c *Client) UpdateCharacter() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildUpdateCharacterFunc(c.grpccli, c.opts...),
			EncodeUpdateCharacterRequest,
			DecodeUpdateCharacterResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}

// DeleteCharacter calls the "DeleteCharacter" function in
// character_servicepb.CharacterServiceClient interface.
func (c *Client) DeleteCharacter() goa.Endpoint {
	return func(ctx context.Context, v any) (any, error) {
		inv := goagrpc.NewInvoker(
			BuildDeleteCharacterFunc(c.grpccli, c.opts...),
			EncodeDeleteCharacterRequest,
			DecodeDeleteCharacterResponse)
		res, err := inv.Invoke(ctx, v)
		if err != nil {
			resp := goagrpc.DecodeError(err)
			switch message := resp.(type) {
			case *goapb.ErrorResponse:
				return nil, goagrpc.NewServiceError(message)
			default:
				return nil, goa.Fault(err.Error())
			}
		}
		return res, nil
	}
}
