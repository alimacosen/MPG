// Code generated by goa v3.11.3, DO NOT EDIT.
//
// CharacterService gRPC client encoders and decoders
//
// Command:
// $ goa gen characters/design

package client

import (
	characterservice "characters/gen/character_service"
	character_servicepb "characters/gen/grpc/character_service/pb"
	"context"

	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildCreateCharacterFunc builds the remote method to invoke for
// "CharacterService" service "createCharacter" endpoint.
func BuildCreateCharacterFunc(grpccli character_servicepb.CharacterServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.CreateCharacter(ctx, reqpb.(*character_servicepb.CreateCharacterRequest), opts...)
		}
		return grpccli.CreateCharacter(ctx, &character_servicepb.CreateCharacterRequest{}, opts...)
	}
}

// EncodeCreateCharacterRequest encodes requests sent to CharacterService
// createCharacter endpoint.
func EncodeCreateCharacterRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*characterservice.CreateCharacterPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "createCharacter", "*characterservice.CreateCharacterPayload", v)
	}
	return NewProtoCreateCharacterRequest(payload), nil
}

// DecodeCreateCharacterResponse decodes responses from the CharacterService
// createCharacter endpoint.
func DecodeCreateCharacterResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*character_servicepb.CreateCharacterResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "createCharacter", "*character_servicepb.CreateCharacterResponse", v)
	}
	res := NewCreateCharacterResult(message)
	return res, nil
}

// BuildGetCharacterFunc builds the remote method to invoke for
// "CharacterService" service "getCharacter" endpoint.
func BuildGetCharacterFunc(grpccli character_servicepb.CharacterServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.GetCharacter(ctx, reqpb.(*character_servicepb.GetCharacterRequest), opts...)
		}
		return grpccli.GetCharacter(ctx, &character_servicepb.GetCharacterRequest{}, opts...)
	}
}

// EncodeGetCharacterRequest encodes requests sent to CharacterService
// getCharacter endpoint.
func EncodeGetCharacterRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*characterservice.GetCharacterPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "getCharacter", "*characterservice.GetCharacterPayload", v)
	}
	return NewProtoGetCharacterRequest(payload), nil
}

// DecodeGetCharacterResponse decodes responses from the CharacterService
// getCharacter endpoint.
func DecodeGetCharacterResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*character_servicepb.GetCharacterResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "getCharacter", "*character_servicepb.GetCharacterResponse", v)
	}
	res := NewGetCharacterResult(message)
	return res, nil
}

// BuildUpdateCharacterFunc builds the remote method to invoke for
// "CharacterService" service "updateCharacter" endpoint.
func BuildUpdateCharacterFunc(grpccli character_servicepb.CharacterServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.UpdateCharacter(ctx, reqpb.(*character_servicepb.UpdateCharacterRequest), opts...)
		}
		return grpccli.UpdateCharacter(ctx, &character_servicepb.UpdateCharacterRequest{}, opts...)
	}
}

// EncodeUpdateCharacterRequest encodes requests sent to CharacterService
// updateCharacter endpoint.
func EncodeUpdateCharacterRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*characterservice.UpdateCharacterPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "updateCharacter", "*characterservice.UpdateCharacterPayload", v)
	}
	return NewProtoUpdateCharacterRequest(payload), nil
}

// DecodeUpdateCharacterResponse decodes responses from the CharacterService
// updateCharacter endpoint.
func DecodeUpdateCharacterResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*character_servicepb.UpdateCharacterResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "updateCharacter", "*character_servicepb.UpdateCharacterResponse", v)
	}
	res := NewUpdateCharacterResult(message)
	return res, nil
}

// BuildDeleteCharacterFunc builds the remote method to invoke for
// "CharacterService" service "deleteCharacter" endpoint.
func BuildDeleteCharacterFunc(grpccli character_servicepb.CharacterServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb any, opts ...grpc.CallOption) (any, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.DeleteCharacter(ctx, reqpb.(*character_servicepb.DeleteCharacterRequest), opts...)
		}
		return grpccli.DeleteCharacter(ctx, &character_servicepb.DeleteCharacterRequest{}, opts...)
	}
}

// EncodeDeleteCharacterRequest encodes requests sent to CharacterService
// deleteCharacter endpoint.
func EncodeDeleteCharacterRequest(ctx context.Context, v any, md *metadata.MD) (any, error) {
	payload, ok := v.(*characterservice.DeleteCharacterPayload)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "deleteCharacter", "*characterservice.DeleteCharacterPayload", v)
	}
	return NewProtoDeleteCharacterRequest(payload), nil
}

// DecodeDeleteCharacterResponse decodes responses from the CharacterService
// deleteCharacter endpoint.
func DecodeDeleteCharacterResponse(ctx context.Context, v any, hdr, trlr metadata.MD) (any, error) {
	message, ok := v.(*character_servicepb.DeleteCharacterResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("CharacterService", "deleteCharacter", "*character_servicepb.DeleteCharacterResponse", v)
	}
	res := NewDeleteCharacterResult(message)
	return res, nil
}
